{"version":3,"sources":["athens/devcards/athena.cljs"],"mappings":"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","names":["athens.devcards.athena/container-style","athens.style/DEPTH-SHADOWS","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.devcards.athena/athena-input-style","athens.devcards.athena/results-list-style","athens.devcards.athena/results-heading-style","athens.devcards.athena/result-style","athens.devcards.athena/result-highlight-style","athens.devcards.athena/hint-style","athens.style/OPACITIES","athens.devcards.athena/re-case-insensitive","query","cljs.core/re-pattern","athens.devcards.athena/search-in-block-title","G__55684","G__55685","cljs.core/deref","G__55686","datascript.core/q","athens.db/dsdb","athens.devcards.athena/get-parent-node","block","b","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/first","athens.devcards.athena/search-in-block-content","G__55688","G__55689","G__55690","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__55687#","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","athens.devcards.athena/highlight-match","txt","query-pattern","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","i","part","cljs.core/re-find","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","clojure.string.split.cljs$core$IFn$_invoke$arity$2","athens.devcards.athena/search-handler","*cache","*match","e","clojure.string/blank?","cljs.core/reset!","result","or__4185__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__55691","cljs.core/count","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","athens.devcards.athena/key-down-handler","key","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/ESC","G__55692","re-frame.core/dispatch","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/UP","goog.events.KeyCodes/DOWN","athens.devcards.athena/athena-prompt-el","athens.devcards.buttons/button-primary","G__55693","js/module$node_modules$$material_ui$icons$index.Search","athens.devcards.athena/recent-el","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","athens.devcards.athena/athena-el","athena?","change-handler","vec__55694","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__55697","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","pages","blocks","iter__4582__auto__","s__55700","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__55702","cljs.core/chunk-buffer","i__55701","vec__55703","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__55699","cljs.core/chunk-rest","vec__55706","cljs.core/cons","cljs.core/rest","x","cljs.core/list","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","parent","page-title","block-uid","block-string","athens.router/navigate-uid","stylefy.core.use_sub_style.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.ArrowForward","athens.devcards.athena/athena-component","G__55709","re-frame.core/subscribe","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","handler","devcards.core/register-card","devcards.core/card-base","js/athens","js/athens.devcards","js/athens.devcards.athena","js/athens.devcards.athena.t_athens$devcards$athena55710","athens.devcards.athena/t_athens$devcards$athena55710","_55712","meta55711","this__38815__auto__","devcard-opts__38816__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__38834__auto__","cljs.core/fn?","data-atom__38835__auto__","owner__38836__auto__","reagent.core/as-element","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.athena/->t_athens$devcards$athena55710","n","n-child","datascript.core.transact_BANG_.cljs$core$IFn$_invoke$arity$2","js/athens.devcards.athena.t_athens$devcards$athena55713","athens.devcards.athena/t_athens$devcards$athena55713","_55715","meta55714","athens.devcards.athena/->t_athens$devcards$athena55713","athens.devcards.db/load-real-db-button","js/athens.devcards.athena.t_athens$devcards$athena55716","athens.devcards.athena/t_athens$devcards$athena55716","_55718","meta55717","athens.devcards.athena/->t_athens$devcards$athena55716","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.athena\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.devcards.buttons :refer [button-primary]]\n    [athens.devcards.db :refer [load-real-db-button]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [athens.subs]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [devcards.core :refer-macros [defcard-rg]]\n    [re-frame.core :refer [subscribe dispatch]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style use-sub-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Styles\n\n\n(def container-style\n  {:width         \"784px\"\n   :border-radius \"4px\"\n   :box-shadow    [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :display       \"flex\"\n   :flex-direction \"column\"\n   :background    (color :app-bg-color)\n   :position      \"fixed\"\n   :overflow      \"hidden\"\n   :max-height    \"60vh\"\n   :top           \"50%\"\n   :left          \"50%\"\n   :transform     \"translate(-50%, -50%)\"\n   :z-index       2})\n\n\n(def athena-input-style\n  {:width \"100%\"\n   :border 0\n   :font-size      \"38px\"\n   :font-weight    \"300\"\n   :line-height    \"49px\"\n   :letter-spacing \"-0.03em\"\n   :border-radius \"4px 4px 0 0\"\n   :color          \"#433F38\"\n   :caret-color    (color :link-color)\n   :padding \"24px\"\n   :cursor \"text\"\n   ::stylefy/mode {:focus {:outline \"none\"}\n                   \"::placeholder\" {:color (color :body-text-color :opacity-low)}}})\n\n\n(def results-list-style\n  {:background    (color :app-bg-color)\n   :overflow-y \"auto\"\n   :max-height \"100%\"})\n\n\n(def results-heading-style\n  {:padding \"4px 18px\"\n   :background (color :app-bg-color)\n   :display \"flex\"\n   :position \"sticky\"\n   :top \"0\"\n   :justify-content \"space-between\"\n   :box-shadow [[\"0 1px 0 0 \" (color :body-text-color :opacity-lower)]]\n   :border-top [[\"1px solid\" (color :body-text-color :opacity-lower)]]})\n\n\n(def result-style\n  {:display \"grid\"\n   :grid-template \"\\\"title icon\\\" \\\"preview icon\\\"\"\n   :grid-gap \"0 12px\"\n   :grid-template-columns \"1fr auto\"\n   :padding \"8px 32px\"\n   :background (color :body-text-color 0.02)\n   :transition \"all .05s ease\"\n   :border-top [[\"1px solid \" (color :body-text-color :opacity-lower)]]\n   ::stylefy/sub-styles {:title {:grid-area \"title\"\n                                 :font-size \"16px\"\n                                 :margin \"0\"\n                                 :color (color :header-text-color)\n                                 :font-weight \"500\"}\n                         :preview {:grid-area \"preview\"\n                                   :white-space \"wrap\"\n                                   :word-break \"break-word\"\n                                  ;;  :overflow \"hidden\"\n                                  ;;  :text-overflow \"ellipsis\"\n                                  ;;  :display \"-webkit-box\"\n                                  ;;  :-webkit-line-clamp \"2\"\n                                  ;;  :-webkit-box-orient \"vertical\"\n                                   :color (color :body-text-color :opacity-med)}\n                         :link-leader {:grid-area \"icon\"\n                                       :color \"transparent\"\n                                       :margin \"auto auto\"}}\n   ::stylefy/mode {:hover {:background (color :link-color)\n                           :color (color :app-bg-color)}}\n   ::stylefy/manual [[:&:hover [:.title :.preview :.link-leader :.result-highlight {:color \"inherit\"}]]]})\n\n\n(def result-highlight-style\n  {:color \"#000\"\n   :font-weight \"500\"})\n\n\n(def hint-style\n  {:color \"inherit\"\n   :opacity (:opacity-med OPACITIES)\n   :font-size \"14px\"\n   ::stylefy/manual [[:kbd {:text-transform \"uppercase\"\n                            :font-family \"inherit\"\n                            :font-size \"12px\"\n                            :font-weight 600\n                            :border \"1px solid rgba(67, 63, 56, 0.25)\"\n                            :border-radius \"4px\"\n                            :padding \"0 4px\"}]]})\n\n\n;;; Utilities\n\n\n(defn re-case-insensitive\n  \"More options here https://clojuredocs.org/clojure.core/re-pattern\"\n  [query]\n  (re-pattern (str \"(?i)\" query)))\n\n\n(defn search-in-block-title\n  [query]\n  (d/q '[:find [(pull ?node [:db/id :node/title :block/uid]) ...]\n         :in $ ?query-pattern\n         :where\n         [?node :node/title ?txt]\n         [(re-find ?query-pattern ?txt)]]\n       @db/dsdb\n       (re-case-insensitive query)))\n\n\n(defn get-parent-node\n  [block]\n  (loop [b block]\n    (if (:node/title b)\n      (assoc block :block/parent b)\n      (recur (first (:block/_children b))))))\n\n\n(defn search-in-block-content\n  [query]\n  (->>\n    (d/q '[:find [(pull ?block [:db/id :block/uid :block/string :node/title {:block/_children ...}]) ...]\n           :in $ ?query-pattern\n           :where\n           [?block :block/string ?txt]\n           [(re-find ?query-pattern ?txt)]]\n         @db/dsdb\n         (re-case-insensitive query))\n    (map get-parent-node)\n    (map #(dissoc % :block/_children))))\n\n\n(defn highlight-match\n  [query txt]\n  (let [query-pattern (re-case-insensitive (str \"((?<=\" query \")|(?=\" query \"))\"))]\n    (doall\n      (map-indexed (fn [i part]\n                     (if (re-find query-pattern part)\n                       [:span.result-highlight (use-style result-highlight-style {:key i}) part]\n                       part))\n                   (clojure.string/split txt query-pattern)))))\n\n\n(defn search-handler\n  [*cache *match]\n  (fn [e]\n    (let [query (.. e -target -value)]\n      (if (clojure.string/blank? query)\n        (reset! *match [query nil])\n        (let [result (or (get @*cache query)\n                         (cond-> {:pages (search-in-block-title query)}\n                           (count query) (assoc :blocks (search-in-block-content query))))]\n          (swap! *cache assoc query result)\n          (reset! *match [query result]))))))\n\n\n(defn key-down-handler\n  [e]\n  (let [key (.. e -keyCode)]\n    (cond\n      ;; exit athena\n      (= key KeyCodes.ESC) (dispatch [:toggle-athena])\n\n      ;; TODO: navigate to page\n      (= key KeyCodes.ENTER) nil\n\n      ;; TODO: move selection up or down\n      (= key KeyCodes.UP) nil\n      (= key KeyCodes.DOWN) nil\n\n      :else nil)))\n\n\n;;; Components\n\n\n(defn athena-prompt-el\n  []\n  [button-primary {:on-click-fn #(dispatch [:toggle-athena])\n                   :label [:<>\n                           [:> mui-icons/Search]\n                           [:span \"Find or Create a Page\"]]\n                   :style {:font-size \"11px\"}}])\n\n\n(defn recent-el\n  []\n  [:div (use-style results-heading-style)\n   [:h5 \"Recent\"]\n   [:span (use-style hint-style)\n    \"Press \"\n    [:kbd \"shift + enter\"]\n    \" to open in right sidebar.\"]])\n\n\n(defn athena-el\n  [athena? *match change-handler]\n  (when athena?\n    [:div.athena (use-style container-style)\n     [:input (use-style athena-input-style\n                        {:type        \"search\"\n                         :auto-focus  true\n                         :placeholder \"Find or Create Page\"\n                         :on-change   change-handler\n                         :on-key-down key-down-handler})]\n     [recent-el]\n     [(fn []\n        (let [[query {:keys [pages blocks] :as result}] @*match]\n          (when result\n            [:div (use-style results-list-style)\n             (doall\n               (for [[i x] (map-indexed list (take 40 (concat (take 20 pages) blocks)))]\n                 (let [parent       (:block/parent x)\n                       page-title   (or (:node/title parent) (:node/title x))\n                       block-uid    (or (:block/uid parent) (:block/uid x))\n                       block-string (:block/string x)]\n                   [:div (use-style result-style {:key i :on-click #(navigate-uid block-uid)})\n                    [:h4.title (use-sub-style result-style :title) (highlight-match query page-title)]\n                    (when block-string\n                      [:span.preview (use-sub-style result-style :preview) (highlight-match query block-string)])\n                    [:span.link-leader (use-sub-style result-style :link-leader) [:> mui-icons/ArrowForward]]])))])))]]))\n\n\n(defn athena-component\n  []\n  (let [athena? @(subscribe [:athena])\n        *cache  (r/atom {})\n        *match  (r/atom nil)\n        handler (search-handler *cache *match)]\n    [athena-el athena? *match handler]))\n\n\n;;; Devcards\n\n\n(defcard-rg Create-Page\n  \"Press button and then search \\\"test\\\" \"\n  [button-primary {:on-click-fn (fn []\n                                  (let [n       (inc (:max-eid @db/dsdb))\n                                        n-child (inc n)]\n                                    (d/transact! db/dsdb [{:node/title     (str \"Test Page \" n)\n                                                           :block/uid      (str \"uid-\" n)\n                                                           :block/children [{:block/string (str \"Test Block\" n-child) :block/uid (str \"uid-\" n-child)}]}])))\n                   :label       \"Create Test Pages and Blocks\"}])\n\n\n(defcard-rg Load-Real-DB\n  [load-real-db-button])\n\n\n(defcard-rg Athena-Prompt\n  [:<>\n   [athena-prompt-el]\n   [athena-component]])\n"]}