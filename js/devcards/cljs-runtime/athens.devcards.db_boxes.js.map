{"version":3,"sources":["athens/devcards/db_boxes.cljs"],"mappings":"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","names":["athens.devcards.db-boxes/key-code->key","athens.devcards.db-boxes/log","js/console.log","athens.devcards.db-boxes/trace","x","devcards.core/register-card","devcards.core/card-base","js/athens","js/athens.devcards","js/athens.devcards.db-boxes","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes57881","athens.devcards.db-boxes/t_athens$devcards$db_boxes57881","_57883","meta57882","cljs.core/PROTOCOL_SENTINEL","this__48082__auto__","devcard-opts__48083__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__48112__auto__","cljs.core/fn?","data-atom__48113__auto__","owner__48114__auto__","reagent.core/as-element","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.db-boxes/->t_athens$devcards$db_boxes57881","athens.style/style-guide-css","athens.devcards.db-boxes/initial-box","js/athens.devcards.db-boxes.box-state*","athens.devcards.db-boxes/box-state*","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","p__57884","map__57885","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/eval-box","str-content","box","vec__57887","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","bindings","athens.db/dsdb","datascript.core/q","datascript.core/pull","datascript.core/pull-many","ok?","result","e57890","sci.core.eval_string.cljs$core$IFn$_invoke$arity$2","js/Error","e","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not","athens.devcards.db-boxes/eval-box!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/update-box!","s","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","athens.devcards.db-boxes/update-and-eval-box!","p1__57891#","athens.devcards.db-boxes/increase-limit!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/+","athens.devcards.db-boxes/load-real-db!","conn","c__39615__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__39616__auto__","switch__39592__auto__","state_57931","state_val_57932","statearr-57933","inst_57893","inst_57894","inst_57895","cljs.core/PersistentHashMap","inst_57896","cljs.core.async.impl.ioc-helpers/take!","statearr-57934","inst_57927","statearr-57935","statearr-57936","inst_57898","inst_57903","inst_57904","inst_57905","inst_57906","inst_57907","statearr-57937","statearr-57938","inst_57921","inst_57923","inst_57924","inst_57925","statearr-57939","statearr-57940","inst_57900","inst_57901","statearr-57941","statearr-57942","statearr-57943","inst_57919","inst_57920","statearr-57944","statearr-57945","statearr-57946","inst_57916","statearr-57947","inst_57914","statearr-57948","statearr-57949","inst_57929","cljs.core.async.impl.ioc-helpers/return-chan","statearr-57950","inst_57911","statearr-57951","statearr-57952","state-machine__39593__auto__","ret-value__39594__auto__","result__39595__auto__","cljs.core/keyword-identical?","e57953","js/Object","ex__39596__auto__","statearr-57954","cljs.core.async.impl.ioc-helpers/process-exception","state__39617__auto__","statearr-57955","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic","athens.db/athens-url","datascript.core.transact_BANG_.cljs$core$IFn$_invoke$arity$2","athens.db/str-to-db-tx","js/alert","athens.devcards.db-boxes/load-real-db-button","pressed?","handler","cljs.core/deref","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes57956","athens.devcards.db-boxes/t_athens$devcards$db_boxes57956","_57958","meta57957","athens.devcards.db-boxes/->t_athens$devcards$db_boxes57956","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes57959","athens.devcards.db-boxes/t_athens$devcards$db_boxes57959","_57961","meta57960","athens.devcards.db-boxes/->t_athens$devcards$db_boxes57959","garden.core.css.cljs$core$IFn$_invoke$arity$variadic","athens.devcards.db-boxes/headings","data","mode","G__57962","cljs.core/Keyword","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/max","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/keys","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","athens.devcards.db-boxes/coll-rows","coll","row","p__57963","vec__57964","idx","value","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","athens.devcards.db-boxes/map-rows","m","p__57967","vec__57968","k","v","athens.devcards.db-boxes/tuple-rows","tuples","p__57971","vec__57972","values","heading","athens.devcards.db-boxes/maps-rows","ms","hs","iter__4582__auto__","s__57976","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__57978","cljs.core/chunk-buffer","i__57977","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57975","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","s__57980","b__57982","i__57981","iter__57979","s__57984","b__57986","i__57985","iter__57983","h","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/get-rows","G__57987","athens.devcards.db-boxes/attr-unique?","attr","cljs.core/contains?","athens.db/schema","athens.devcards.db-boxes/attr-many?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/attr-ref?","var_args","G__57989","athens.devcards.db-boxes/pull-entity-str","id","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p__57990","map__57991","athens.devcards.db-boxes/cell","athens.devcards.db_boxes.pull_entity_str.cljs$core$IFn$_invoke$arity$1","or__4185__auto__","athens.devcards.db_boxes.pull_entity_str.cljs$core$IFn$_invoke$arity$2","s__57994","b__57996","i__57995","iter__57993","G__57997","G__57998","s__58000","b__58002","i__58001","iter__57999","G__58003","G__58004","athens.devcards.db-boxes/table-view","limit","rows","athens.lib.dom.attributes.with_styles.cljs$core$IFn$_invoke$arity$1","s__58006","b__58008","i__58007","iter__58005","s__58010","b__58012","i__58011","iter__58009","cljs.core.take.cljs$core$IFn$_invoke$arity$2","s__58014","b__58016","i__58015","map__58017","iter__58013","map__58019","s__58022","b__58024","i__58023","map__58025","iter__58021","map__58027","c","athens.devcards.db-boxes/coll-of-maps?","cljs.core/coll?","cljs.core/every?","cljs.core/map?","athens.devcards.db-boxes/tuples?","athens.devcards.db-boxes/browser-component","athens.devcards.db-boxes/error-component","error","athens.devcards.db-boxes/handle-box-change!","athens.devcards.db-boxes/handle-return-key!","athens.devcards.db-boxes/insert-tab","pos","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/handle-tab-key!","t","athens.devcards.db-boxes/handle-box-key-down!","key-code","shift?","G__58029","athens.devcards.db-boxes/box-component","box-state","_","map__58030","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes58032","athens.devcards.db-boxes/t_athens$devcards$db_boxes58032","_58034","meta58033","athens.devcards.db-boxes/->t_athens$devcards$db_boxes58032","cljs.core/reset!","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes58035","athens.devcards.db-boxes/t_athens$devcards$db_boxes58035","_58037","meta58036","athens.devcards.db-boxes/->t_athens$devcards$db_boxes58035","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.db-boxes\n  (:require\n    [athens.db :as db]\n    [athens.lib.dom.attributes :refer [with-attributes with-styles]]\n    [athens.style :refer [style-guide-css]]\n    [cljs-http.client :as http]\n    [cljs.core.async :refer [<!]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [datascript.core :as d]\n    [devcards.core :as devcards :refer [defcard defcard-rg]]\n    [garden.core :refer [css]]\n    [reagent.core :as r]\n    [sci.core :as sci])\n  (:require-macros\n    [cljs.core.async.macros :refer [go]]))\n\n\n(def key-code->key\n  {8   :backspace\n   9   :tab\n   13  :return})\n\n\n(def log js/console.log)\n\n\n(defn trace\n  [x]\n  (log x) x)\n\n\n(defcard-rg Import-Styles\n  [style-guide-css])\n\n\n(defcard \"\n  # An experiment in browsing the datascript database\n\n  You can use these devcards to explore the Athens datascript database.\n\n  Initial data:\n  - Start by loading initial data with the \\\"Load Real Data\\\" button.\n  - This will load some sample datoms from the ego.datoms file\n\n  Executing queries:\n  - The browse-box uses [sci](https://github.com/borkdude/sci) to execute datascript queries.\n  - In addition to the (non-side-effecting) clojure.core functions, the following bindings are available:\n  - `athens/db` -> the datascript connection, dereference (`@`) to get the current database value\n  - `d/q` -> for querying the database\n  - `d/pull` -> pull one or more attributes of an entity, returns a map\n  - `d/pull-many` -> like `d/pull`, but pulls many entities at once\n  - Execute the query by pressing `shift-enter`\n\n  Browsing:\n  - The browser is a simple html table translating the query result into rows and cells.\n  - Browsing is possible if you've used a pull expression (in a query or with `d/pull` or `d/pull-many`).\n  - If you click a link, it will generate a new query and evaluate it.\n\n  History:\n  - Devcards keeps a history for us. Use the arrows at the bottom to navigate back to earlier states.\n\n  Possible improvements:\n  - Right now navigation is only possible by using a pull expression. By analysing queries it might also be possible for all other queries.\n  - No transctions are currently allowed, but this can easily be changed by adding `d/transact` to sci's bindings.\n  - There is absolutely no styling, some minimal styling would probably make reading the table easier.\n  \")\n\n\n(def initial-box\n  {:str-content\n   \"(d/q '[:find [(pull ?e [*]) ...]\n       :where [?e :node/title]]\n    @athens/db)\"\n   :limit 10})\n\n\n(defonce box-state*\n  (r/atom initial-box))\n\n\n(defn eval-box\n  [{:keys [str-content] :as box}]\n  (let [bindings {'athens/db db/dsdb\n                  'd/q d/q\n                  'd/pull d/pull\n                  'd/pull-many d/pull-many}\n        [ok? result] (try\n                       [true (sci/eval-string str-content {:bindings bindings})]\n                       (catch js/Error e [false e]))]\n    (-> box\n        (assoc :result result)\n        (assoc :error (not ok?)))))\n\n\n(defn eval-box!\n  []\n  (swap! box-state* eval-box))\n\n\n(defn update-box!\n  [s]\n  (swap! box-state* assoc :str-content s))\n\n\n(defn update-and-eval-box!\n  [s]\n  (swap! box-state*\n         #(-> %\n              (assoc :str-content s)\n              (eval-box))))\n\n\n(defn increase-limit!\n  []\n  (swap! box-state* update :limit + 10))\n\n(defn load-real-db!\n  [conn]\n  (go\n    (let [res (<! (http/get db/athens-url {:with-credentials? false}))\n          {:keys [success body]} res]\n      (if success\n        (do (d/transact! conn (db/str-to-db-tx body))\n            (swap! box-state* eval-box))\n        (js/alert \"Failed to retrieve data from GitHub\")))))\n\n\n(defn load-real-db-button\n  [conn]\n  (let [pressed? (r/atom false)\n        handler (fn []\n                  (swap! pressed? not)\n                  (load-real-db! conn))]\n    (fn []\n      [:button.primary {:disabled @pressed? :on-click handler} \"Load Real Data\"])))\n\n\n(defcard-rg Load-Real-DB\n  \"Downloads the ego db. Takes a few seconds.\"\n  [load-real-db-button db/dsdb])\n\n\n(defcard-rg Modify-Devcards\n  \"Increase width to 90% for table\"\n  [:style (css [:.com-rigsomelight-devcards-container {:width \"90%\"}])])\n\n\n(defn headings\n  [data mode]\n  (case mode\n    :coll [\"idx\" \"val\"]\n    :map [\"key\" \"val\"]\n    :tuples (into [\"idx\"] (->> data\n                               (map count)\n                               (apply max)\n                               range))\n    :maps (into [\"idx\"] (->> data\n                             (mapcat keys)\n                             (distinct)))))\n\n\n(defn coll-rows\n  [coll]\n  (let [row (fn [[idx value]]\n              [{:value idx\n                :heading \"idx\"\n                :idx idx}\n               {:value value\n                :heading \"val\"\n                :idx idx}])]\n    (->> coll\n         (map-indexed vector)\n         (map row))))\n\n\n(defn map-rows\n  [m]\n  (let [row (fn [[k v]]\n              [{:value k\n                :heading \"key\"\n                :idx k}\n               {:value v\n                :attr k\n                :heading \"val\"\n                :idx k}])]\n    (map row m)))\n\n\n; still not very clean\n(defn tuple-rows\n  [tuples]\n  (let [row (fn [[idx values]]\n              (into\n                [{:value idx\n                  :heading \"idx\"\n                  :idx idx}]\n                (map-indexed\n                  (fn [heading value]\n                    {:value value\n                     :heading (str heading)\n                     :idx idx})\n                  values)))]\n    (->> tuples\n         (map-indexed vector)\n         (map row))))\n\n\n(defn maps-rows\n  [ms]\n  (let [hs (headings ms :maps)]\n    (for [idx (-> ms count range)]\n      (into [{:value idx\n              :heading \"idx\"\n              :idx idx}]\n            (for [h (rest hs)]\n              {:value (get-in ms [idx h])\n               :attr h\n               :heading (str h)\n               :idx idx})))))\n\n\n(defn get-rows\n  [data mode]\n  (case mode\n    :coll (coll-rows data)\n    :map (map-rows data)\n    :tuples (tuple-rows data)\n    :maps (maps-rows data)))\n\n\n(defn attr-unique?\n  [attr]\n  (contains? (get db/schema attr) :db/unique))\n\n\n(defn attr-many?\n  [attr]\n  (= (get-in db/schema [attr :db/cardinality])\n     :db.cardinality/many))\n\n\n(defn attr-ref?\n  [attr]\n  (= (get-in db/schema [attr :db/valueType])\n     :db.type/ref))\n\n\n(defn pull-entity-str\n  ([id]\n   (str \"(d/pull @athens/db '[*] \" id \")\"))\n  ([attr id]\n   (str \"(d/pull @athens/db '[*] [\" attr \" \" (pr-str id) \"])\")))\n\n\n(defn cell\n  [{:keys [value attr id]}]\n  (if value\n    (cond\n      (= :db/id attr)\n      [:a {:on-click #(update-and-eval-box! (pull-entity-str (or id value)))\n           :style {:cursor :pointer}}\n       (str value)]\n\n      (attr-unique? attr)\n      [:a {:on-click #(update-and-eval-box! (pull-entity-str attr value))\n           :style {:cursor :pointer}}\n       (str value)]\n\n      (and (attr-many? attr)\n           (attr-ref? attr))\n      [:ul (for [v value]\n             ^{:key v}\n             [:li (cell {:value v\n                         :attr :db/id\n                         :id (:db/id v)})])]\n\n      (attr-many? attr)\n      [:ul (for [v value]\n             ^{:key v}\n             [:li (cell {:value v})])]\n\n      :else\n      (str value))\n    \"\"))\n\n\n(defn table-view\n  [data mode limit]\n  (let [hs (headings data mode)\n        rows (get-rows data mode)]\n    [:div (with-styles {:font-size \"12px\"\n                        :overflow-x \"auto\"})\n     [:table\n      [:thead\n       [:tr (for [h hs]\n              ^{:key (str \"heading-\" h)}\n              [:th (str h)])]]\n      [:tbody\n       (for [row (if (= mode :map)\n                   rows\n                   (take limit rows))]\n         ^{:key (str \"row-\" (-> row first :idx))}\n         [:tr (for [{:keys [idx heading] :as c} row]\n                ^{:key (str idx heading)}\n                [:td (with-styles {:background-color \"none\"})\n                     (cell c)])])]]]))\n\n\n(defn coll-of-maps?\n  [x]\n  (and (coll? x)\n       (every? map? x)))\n\n\n(defn tuples?\n  [x]\n  (and (coll? x)\n       (every? coll? x)))\n\n\n(defn browser-component\n  [result limit]\n  [:div\n   [:div (cond\n\n           (coll-of-maps? result)\n           (table-view result :maps limit)\n\n           (map? result)\n           (table-view result :map limit)\n\n           (tuples? result)\n           (table-view result :tuples limit)\n\n           (coll? result)\n           (table-view result :coll limit)\n\n           :else\n           (str result))]\n   [:div (when (and (coll? result)\n                    (not (map? result))\n                    (< limit (count result)))\n           [:span (str \"Showing \" limit \" out of \" (count result) \" rows \")\n                  [:a {:on-click increase-limit!\n                       :style {:cursor :pointer}}\n                      \"load more\"]])]])\n\n\n(defn error-component\n  [error]\n  [:div {:style {:color \"red\"}}\n   (str error)])\n\n\n(defn handle-box-change!\n  [e]\n  (update-box! (-> e .-target .-value)))\n\n\n(defn handle-return-key!\n  [e]\n  (.preventDefault e)\n  (eval-box!))\n\n\n(defn insert-tab\n  [s pos]\n  (str (subs s 0 pos) \"  \" (subs s pos)))\n\n\n(defn handle-tab-key!\n  [e]\n  (let [t (.-target e)\n        v (.-value t)\n        pos (.-selectionStart t)]\n    (.preventDefault e)\n    (update-box! (insert-tab v pos))\n    (set! (.-selectionEnd t) (+ 2 pos))))\n\n\n(defn handle-box-key-down!\n  [e]\n  (let [key-code (.-keyCode e)\n        shift? (.-shiftKey e)\n        k (key-code->key key-code)]\n    (case k\n      :return (when shift?\n                (handle-return-key! e))\n      :tab (handle-tab-key! e)\n      nil)))\n\n\n(defn box-component\n  [box-state _]\n  (let [{:keys [str-content result error limit]} @box-state]\n    [:div\n     [:textarea {:value str-content\n                 :on-change handle-box-change!\n                 :on-key-down handle-box-key-down!\n                 :style {:width \"100%\"\n                         :min-height \"150px\"\n                         :resize :none\n                         :font-size \"12px\"\n                         :font-family \"IBM Plex Mono\"}}]\n     (if-not error\n       (browser-component result limit)\n       (error-component result))]))\n\n\n(defcard-rg Reset-to-all-pages\n  (fn []\n    [:button {:on-click #(do (reset! box-state* initial-box)\n                             (eval-box!))}\n     \"Reset\"]))\n\n\n(defcard-rg Browse-db-box\n  box-component\n  box-state*\n  {:history true})\n"]}