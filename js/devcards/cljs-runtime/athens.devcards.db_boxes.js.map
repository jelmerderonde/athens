{"version":3,"sources":["athens/devcards/db_boxes.cljs"],"mappings":"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","names":["athens.devcards.db-boxes/log","js/console.log","athens.devcards.db-boxes/trace","x","devcards.core/register-card","devcards.core/card-base","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","athens.devcards.db-boxes/schema","js/athens","js/athens.devcards","js/athens.devcards.db-boxes","js/athens.devcards.db-boxes.dsdb","athens.devcards.db-boxes/dsdb","datascript.core.create_conn.cljs$core$IFn$_invoke$arity$1","js/athens.devcards.db-boxes.loading?","athens.devcards.db-boxes/loading?","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","c__39615__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__39616__auto__","switch__39592__auto__","state_50293","state_val_50294","inst_50282","inst_50283","inst_50284","cljs.core/PersistentHashMap","inst_50285","cljs.core.async.impl.ioc-helpers/take!","inst_50287","inst_50288","inst_50289","inst_50290","inst_50291","statearr-50295","cljs.core.async.impl.ioc-helpers/return-chan","statearr-50296","state-machine__39593__auto__","ret-value__39594__auto__","result__39595__auto__","cljs.core/keyword-identical?","e50297","js/Object","ex__39596__auto__","statearr-50298","cljs.core.async.impl.ioc-helpers/process-exception","state__39617__auto__","statearr-50299","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic","athens.db/athens-url","athens.db/str-to-db-tx","datascript.core.transact.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","athens.devcards.db-boxes/initial-box","js/athens.devcards.db-boxes.box-state*","athens.devcards.db-boxes/box-state*","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","p__50300","map__50301","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/eval-box","str-content","box","vec__50303","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","bindings","datascript.core/q","datascript.core/pull","datascript.core/pull-many","ok?","result","e50306","sci.core.eval_string.cljs$core$IFn$_invoke$arity$2","js/Error","e","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not","athens.devcards.db-boxes/headings","data","mode","G__50307","cljs.core/Keyword","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/max","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/keys","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","athens.devcards.db-boxes/rows","G__50308","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","cljs.core/seq","idx","hs","iter__4582__auto__","s__50310","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__50312","cljs.core/chunk-buffer","i__50311","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50309","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","row-idx","s__50314","b__50316","i__50315","iter__50313","s__50318","b__50320","i__50319","iter__50317","h","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","athens.devcards.db-boxes/table-view","s__50322","b__50324","i__50323","iter__50321","s__50326","b__50328","i__50327","iter__50325","row","s__50330","b__50332","i__50331","iter__50329","s__50334","b__50336","i__50335","iter__50333","cell","athens.devcards.db-boxes/coll-of-maps?","cljs.core/coll?","cljs.core/every?","cljs.core/map?","athens.devcards.db-boxes/tuples?","athens.devcards.db-boxes/browser-component","athens.devcards.db-boxes/error-component","error","athens.devcards.db-boxes/handle-box-change!","value","p1__50337#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/box-component","map__50338","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes50340","athens.devcards.db-boxes/t_athens$devcards$db_boxes50340","_50342","meta50341","this__46709__auto__","devcard-opts__46710__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__46728__auto__","cljs.core/fn?","data-atom__46729__auto__","owner__46730__auto__","reagent.core/as-element","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.db-boxes/->t_athens$devcards$db_boxes50340","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.db-boxes\n  (:require\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [devcards.core :as devcards :refer [defcard defcard-rg]]\n    [reagent.core :as rg]\n    [sci.core :as sci]\n    [cljs-http.client :as http]\n    [athens.db :as db]\n    [cljs.core.async :refer [<!]])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n\n(def log js/console.log)\n\n\n(defn trace\n  [x]\n  (log x) x)\n\n\n(defcard \"\n  # An experiment in querying the datascript database\")\n\n\n(def schema\n  {:block/uid      {:db/unique :db.unique/identity}\n   :node/title     {:db/unique :db.unique/identity}\n   :attrs/lookup   {:db/cardinality :db.cardinality/many}\n   :block/children {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}})\n\n\n(defonce dsdb (d/create-conn schema))\n\n\n(defonce loading? (atom true))\n\n\n(when @loading?\n  (go\n    (let [response (<! (http/get db/athens-url\n                                 {:with-credentials? false}))]\n      (->> response\n           :body\n           db/str-to-db-tx\n           (d/transact dsdb))\n\n      (reset! loading? false))))\n\n\n(def initial-box\n  {:str-content\n    \"(d/q '[:find ?e ?title\n            :where [?e :node/title ?title]]\n       @athens/db)\"})\n\n(comment (d/q '[:find [(pull ?e [:node/title :block/uid]) ...]\n                :where [?e :node/title ?title]]\n            @athens/db))\n\n\n(defonce box-state*\n  (rg/atom initial-box))\n\n\n(defn eval-box\n  [{:keys [str-content] :as box}]\n  (let [bindings {'athens/db dsdb\n                  'd/q d/q\n                  'd/pull d/pull\n                  'd/pull-many d/pull-many}\n        [ok? result] (try\n                       [true (sci/eval-string str-content {:bindings bindings})]\n                       (catch js/Error e [false e]))]\n    (-> box\n        (assoc :result result)\n        (assoc :error (not ok?)))))\n\n\n(defn headings\n  [data mode]\n  (case mode\n    :coll [\"idx\" \"val\"]\n    :map [\"key\" \"val\"]\n    :tuples (into [\"idx\"] (->> data\n                               (map count)\n                               (apply max)\n                               range))\n    :maps (into [\"idx\"] (->> data\n                             (mapcat keys)\n                             (distinct)))))\n\n\n\n(defn rows\n  [data mode]\n  (case mode\n    :coll (map-indexed vector data)\n    :map (seq data)\n    :tuples (map-indexed (fn [idx data] (into [idx] data))  data)\n    :maps (let [hs (headings data mode)]\n            (for [row-idx (-> data count range)]\n              (into [row-idx]\n                (for [h (rest hs)]\n                  (get-in data [row-idx h] \"\")))))))\n\n\n(defn table-view\n  [data mode]\n  (let [hs (headings data mode)]\n    [:table\n     [:tr (for [h hs] [:th (str h)])]\n     (for [row (rows data mode)]\n       [:tr (for [cell row]\n              [:td (str cell)])])]))\n\n\n\n(defn coll-of-maps?\n  [x]\n  (and (coll? x)\n       (every? map? x)))\n\n\n(defn tuples?\n  [x]\n  (and (coll? x)\n       (every? coll? x)))\n\n\n(defn browser-component\n  [result]\n  [:div (cond\n\n          (coll-of-maps? result)\n          (table-view result :maps)\n\n          (map? result)\n          (table-view result :map)\n\n          (tuples? result)\n          (table-view result :tuples)\n\n          (coll? result)\n          (table-view result :coll)\n\n          :else\n          (str result))])\n\n(defn error-component\n  [error]\n  [:div {:style {:color \"red\"}}\n   (str error)])\n\n(defn handle-box-change!\n  [e]\n  (let [value (-> e .-target .-value)]\n    (swap! box-state*\n           #(-> %\n                (assoc :str-content value)\n                (eval-box)))))\n\n(defn box-component\n  []\n  (let [{:keys [str-content result error]} @box-state*]\n    [:div\n     [:textarea {:value str-content\n                 :on-change handle-box-change!\n                 :style {:width \"100%\"\n                         :min-height \"150px\"\n                         :resize :none}}]\n     (if-not error\n       (browser-component result)\n       (error-component result))]))\n\n\n(defcard-rg box\n  (do\n    (swap! box-state* eval-box)\n    [box-component]))\n"]}