{"version":3,"sources":["athens/devcards/db_boxes.cljs"],"mappings":";;;;;;;;;;;;AAeA,AAAKA,AAAIC;AAGT,AAAA,AAAMC,AACHC;AADH,AAEE,AAACH,AAAAA,AAAAA,AAAIG,AAAAA;;AAAGA;;AAGV,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAQL,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAK,AAACC,AAAcN;;AAG7B,AAAA,AAAAC,AAAAC,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAS,AAAA,AAACC;;AAGnB,AAAA,AAAAC,AAAOF;AAAP,AACE,AAAAG,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAAC,AAAAH,AAAAC;AAAAG,AAAA,AAAAF,AACsByB,AAASC;AAD/B9B,AAAAA;AAAA,AAAA,AAAAO,AAAAP,AAAA,AAAAM;;AAAA,AAAA,AAAAL,AAAA;AAAA,AAAAO,AAAA,AAAAR,AAAA;AAAAS,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAD,AAKSsB;AALTpB,AAAA,AAAAD,AAMUsB,AAAW3C;AANrBuB,AAAA,AAAA,AAQKqB,AAAOzC;AARZQ,AAAA,AAAAa,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAC,AAAAd,AAAAY;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAAf;;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAnB,AAAAC;AAAA,AAAA,AAAA,AAAAmB,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAA,AAAAE,AAAAC;AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAAD;;AAAAC;AAAA,AAAAC,AAAAxB;;AAAA;;AAAA,AAAA,AAAAoB;;;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAjB;;;;AAAAiB;;;;;AAAAjB;;;;;AAAAA;;;;;;;;;AAAAyB,AAAA,AAAAC,AAAA,AAAA5B,AAAAA,AAAAA;AAAA,AAAA,AAAA4B,AAAAC,AAAA,AAAAhC;;AAAA+B;;AAAA,AAAA,AAAAE,AAAAH;;;AAAA9B;AADF;AAYA,AAAA,AAAA,AAAA,AAAKuC;AAOL,AAAA,AAAAjD,AAAAC,AAAAC,AAAAgD;AAAA;AAAA,AAAA,AAASC,AACP,AAACC,AAAQH;;AAGX,AAAAtD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA8BW;;AAG9B,AAAA,AAAA8C,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAC4BO;AAD5B,AAAAH,AAAAJ,AAAA,AACWM;AADX,AAEE,AAAME,AAAO,AAAA,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE,AAAgBJ,AACuBxD,AACN6D,AACGC,AACKC;AAJ/C,AAAA,AAAAJ,AAKYK;AALZ,AAAAL,AAKqBM;AALrB,AAMO,AAAC9E,AAAAA,AAAAA,AAAI8E,AAAAA;;AANZ;;AAAA,AAAA,AAAAN;;;;AAAb,AAQE,AAAA,AAACO,AAAMT,AAAYC;;AAGvB,AAAA,AAAMS,AACHT;AADH,AAAA,AAAA,AAEQ,AAAKA;;AAGb,AAAA,AAAMU;AAAN,AAEE,AAAMC,AAAK,AAAA,AAACrB;AAAZ,AACE,AAAA,AAAA,AAACsB,AACuB,AAAKC,AAAIC;AAAT,AACE,AAAA,AAAC5B,AAAOyB,AAAME,AAAIC;AAF5C,AAGmB,AAAKd;AAAL,AACE,AAAI,AAAA,AAAArD,AAAA,AAAOgE;AAAX,AACGF,AAAQT;;AACT,AAAAe,AAAA,AAAApE,AAAgBgE;AAAhB,AAAAK,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAASD;AAAT,AAAA,AAAA,AAAA,AAAA,AAEU,AAAKA;;;;AAG1C,AAAA,AAAMI,AACHX;AADH,AAEE,AAAMY,AAAM,AAAA,AAAIZ;AAAhB,AACE,AAAA,AAAAa,AAACC,AAAMhC;AAAP,AAEY,AAAA+B,AAAA,AAACZ,AAAmBW,AACpB,AAACtB;;;AAEjB,AAAA,AAAMyB;AAAN,AAEE,AAAAC,AAAA,AAAA5E,AAAoC0C;AAApCkC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9B,AAAA,AAAA8B,AAAA,AAAA,AAAA,AAAA,AAAA7B,AAAAC,AAAA4B,AAAAA;AAAA,AAAA3B,AAAA2B,AAAA,AAAczB;AAAd,AAAAF,AAAA2B,AAAA,AAA0BvB;AAA1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEsBF,AACIoB,AAItBR,AAAeV;;AAGrB,AAAAnE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAI,AAAAC,AAAAC,AAAAoF;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAD,AAAAE;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAC;;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,AAAAhC;;AAAA,AAAA,AAAA,AAAAgC,AAAA,AAAAG,AAAAC;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAAE,AACE;AACE,AAACV,AAAMhC,AAAWQ;;AADpB,AAEGyB;;;AAHL,AAAA,AAAA,AAAAU,AAAAD;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAJ,AAAAE,AAAAC;;;AAAA,AAAAC,AAAAJ;;AAAA,AAAA,AAAAhG,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA6F;;;AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAW,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAA;;;AAAA;;;AAAAG,AAAA,AAAAb;AAAA,AAAA,AAAAF,AAAAE;;;AAAAF;;AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA","names":["athens.devcards.db-boxes/log","js/console.log","athens.devcards.db-boxes/trace","x","devcards.core/register-card","devcards.core/card-base","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","athens.devcards.db-boxes/schema","js/athens","js/athens.devcards","js/athens.devcards.db-boxes","js/athens.devcards.db-boxes.dsdb","athens.devcards.db-boxes/dsdb","datascript.core.create_conn.cljs$core$IFn$_invoke$arity$1","js/athens.devcards.db-boxes.loading?","athens.devcards.db-boxes/loading?","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","c__39615__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__39616__auto__","switch__39592__auto__","state_48991","state_val_48992","inst_48980","inst_48981","inst_48982","cljs.core/PersistentHashMap","inst_48983","cljs.core.async.impl.ioc-helpers/take!","inst_48985","inst_48986","inst_48987","inst_48988","inst_48989","statearr-48993","cljs.core.async.impl.ioc-helpers/return-chan","statearr-48994","state-machine__39593__auto__","ret-value__39594__auto__","result__39595__auto__","cljs.core/keyword-identical?","e48995","js/Object","ex__39596__auto__","statearr-48996","cljs.core.async.impl.ioc-helpers/process-exception","state__39617__auto__","statearr-48997","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic","athens.db/athens-url","athens.db/str-to-db-tx","datascript.core.transact.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","athens.devcards.db-boxes/initial-box","js/athens.devcards.db-boxes.box-state*","athens.devcards.db-boxes/box-state*","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","p__48998","map__48999","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/eval-box","str-content","box","result","e49001","sci.core.eval_string.cljs$core$IFn$_invoke$arity$2","datascript.core/q","datascript.core/pull","datascript.core/pull-many","js/Error","e","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","athens.devcards.db-boxes/browser","athens.devcards.db-boxes/result-wrapper","err*","reagent.core/create-class","err","info","vec__49002","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","athens.devcards.db-boxes/handle-box-change!","value","p1__49005#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","athens.devcards.db-boxes/box-component","map__49006","js/athens.devcards.db-boxes.t_athens$devcards$db_boxes49008","athens.devcards.db-boxes/t_athens$devcards$db_boxes49008","_49010","meta49009","this__46709__auto__","devcard-opts__46710__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__46728__auto__","cljs.core/fn?","data-atom__46729__auto__","owner__46730__auto__","reagent.core/as-element","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.db-boxes/->t_athens$devcards$db_boxes49008"],"sourcesContent":["(ns athens.devcards.db-boxes\n  (:require\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [devcards.core :as devcards :refer [defcard defcard-rg]]\n    [reagent.core :as rg]\n    [sci.core :as sci]\n    [cljs-http.client :as http]\n    [athens.db :as db]\n    [cljs.core.async :refer [<!]])\n  (:require-macros [cljs.core.async.macros :refer [go]]))\n\n\n(def log js/console.log)\n\n\n(defn trace\n  [x]\n  (log x) x)\n\n\n(defcard \"\n  # An experiment in querying the datascript database\")\n\n\n(def schema\n  {:block/uid      {:db/unique :db.unique/identity}\n   :node/title     {:db/unique :db.unique/identity}\n   :attrs/lookup   {:db/cardinality :db.cardinality/many}\n   :block/children {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}})\n\n\n(defonce dsdb (d/create-conn schema))\n\n\n(defonce loading? (atom true))\n\n\n(when @loading?\n  (go\n    (let [response (<! (http/get db/athens-url\n                                 {:with-credentials? false}))]\n      (->> response\n           :body\n           db/str-to-db-tx\n           (d/transact dsdb))\n\n      (reset! loading? false))))\n\n\n(def initial-box\n  {:str-content\n    \"(d/q '[:find ?e ?title\n            :where [?e :node/title ?title]]\n       @athens/db)\"})\n\n\n(defonce box-state*\n  (rg/atom initial-box))\n\n\n(defcard loading-initial-data loading?)\n\n\n(defn eval-box\n  [{:keys [str-content] :as box}]\n  (let [result (try (sci/eval-string str-content\n                                     {:bindings {'athens/db dsdb\n                                                 'd/q d/q\n                                                 'd/pull d/pull\n                                                 'd/pull-many d/pull-many}})\n                    (catch js/Error e\n                      (log e)\n                      \"error\"))]\n    (assoc box :result result)))\n\n\n(defn browser\n  [result]\n  [:div (str result)])\n\n\n(defn result-wrapper\n  []\n  (let [err* (rg/atom nil)]\n    (rg/create-class\n      {:component-did-catch (fn [err info]\n                              (reset! err* [err info]))\n       :reagent-render (fn [result]\n                         (if (nil? @err*)\n                           [browser result]\n                           (let [[_ info] @err*]\n                             [:div\n                              [:code (str info)]])))})))\n\n\n(defn handle-box-change!\n  [e]\n  (let [value (-> e .-target .-value)]\n    (swap! box-state*\n           #(-> %\n                (assoc :str-content value)\n                (eval-box)))))\n\n(defn box-component\n  []\n  (let [{:keys [str-content result]} @box-state*]\n    [:div\n     [:textarea {:value str-content\n                 :on-change handle-box-change!\n                 :style {:width \"100%\"\n                         :min-height \"150px\"\n                         :resize :none}}]\n     [result-wrapper result]]))\n\n\n(defcard-rg box\n  (do\n    (swap! box-state* eval-box)\n    [box-component]))\n"]}