{"version":3,"sources":["athens/subs.cljs"],"mappings":";;;;;;AAUA,AAAAA,AAAA;AAAAC,AAEE,AAAKE,AAAGC;AAAR,AACE,AAAA,AAAOD;;AAHX,AAAA,AAAAH,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;AAMD,AAAAG,AAAA;AAAAC,AAEE,AAAKH,AAAGC;AAAR,AACED;;AAHJ,AAAA,AAAAE,AAAAC,AAAAD,AAAAC,AAACJ,AAAAA,AAAAA;AAMD,AAAAK,AAAA;AAAAC,AAEE,AAAKL,AAAGC;AAAR,AACE,AAAA,AAASD;;AAHb,AAAA,AAAAI,AAAAC,AAAAD,AAAAC,AAACN,AAAAA,AAAAA;AAMD,AAAAO,AAAA;AAAAC,AAEE,AAAKP,AAAGC;AAAR,AACE,AAAA,AAAUD;;AAHd,AAAA,AAAAM,AAAAC,AAAAD,AAAAC,AAACR,AAAAA,AAAAA;AAMD,AAAAS,AAAA;AAAAC,AAEE,AAAKT,AAAGC;AAAR,AACE,AAAA,AAASD;;AAHb,AAAA,AAAAQ,AAAAC,AAAAD,AAAAC,AAACV,AAAAA,AAAAA;AAMD,AAAAW,AAAA;AAAAC,AAEE,AAAKX,AAAGC;AAAR,AACE,AAAA,AAAeD;;AAHnB,AAAA,AAAAU,AAAAC,AAAAD,AAAAC,AAACZ,AAAAA,AAAAA;AAMD,AAAAahC;AAAZ,AAAA,AAAAiC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAMjC;AAAN,AAAAkC,AAAAD,AAAA,AAAA,AAAQE;AAAR,AACE,AAAAC,AAAA,AAAA,AAA4BD;AAA5B,AAAA,AAAAC,AAAAA,AAACC,AAAAA,AAAAA;;AAHLN,AAIE,AAAKO,AAAMtC;AAAX,AACE,AAACuC,AAAkBD;;AALvB,AAAA,AAAAT,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACjC,AAAAA,AAAAA;AAQD,AAAA0C,AAAA;AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAACrB,AAAAA,AAAAA;AAMD,AAAAsB,AAAA;AAAAC,AAEE,AAAAE,AAAY7C;AAAZ,AAAA,AAAA8C,AAAAD;AAAA,AAAAX,AAAAY,AAAA,AAAA,AAAM9C;AAAN,AAAAkC,AAAAY,AAAA,AAAA,AAAQX;AAAR,AACE,AAAAY,AAAA,AAAA,AAA6BZ;AAA7B,AAAA,AAAAY,AAAAA,AAACV,AAAAA,AAAAA;;AAHLO,AAIE,AAAKN,AAAMtC;AAAX,AAEE,AAACgD,AACC,AAACC,AACC,AAAOC,AAAEZ;AAAT,AACOa;;AADP,AAEE,AAAI,AAAA,AAAaD;AACf,AAACE,AAAKD,AAAID;;AACV,AAAO,AAACG,AAAM,AAAA,AAAkBH;AACzB,AAACE,AAAKD,AAAI,AAAA,AAACG,AAAOJ;;;;;;;;;AAbrC,AAAA,AAAAR,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAAC9C,AAAAA,AAAAA;AAgBD,AAAAyD,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAGE,AAAA,AAAAE,AAAA,AAAYQ,AAAMpE;AAAlB,AAAA,AAAA6D,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGiBI;AAHjB,AAAA,AAAAH,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAD;AAAA,AAAYE,AAAMpE;AAAlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGiBoE;;AANnB,AAAA,AAAAb,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;AASD,AAAAU,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAGE,AAAA,AAAAZ,AAAA,AAAYQ,AAAMpE;AAAlB,AAAA,AAAA6D,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAV,AAAAF,AAGiBe;AAHjBZ,AAGyBX;AAHzB,AAAA,AAAAY,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAV,AAAAF,AAEiBc;AAFjBX,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAS,AAAA,AAAA,AAAA,AACgBL;AADhB,AAAAF,AAAAQ;AAAA,AAAA,AAAAR;AAAA,AAAYE,AAAMpE;AAAlB,AACgBoE,AACA,AAAA,AAACO,AACD,AAACC,AAAQvB;;AAN3B,AAAA,AAAAgB,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAAC1E,AAAAA,AAAAA","names":["G__48904","G__48905","re-frame.core/reg-sub","db","_","G__48906","G__48907","G__48908","G__48909","G__48910","G__48911","G__48912","G__48913","G__48914","G__48915","G__48916","G__48917","re-posh.core/reg-query-sub","G__48918","G__48919","G__48920","G__48921","G__48922","G__48923","re-posh.core/reg-pull-sub","G__48924","G__48925","G__48926","G__48927","G__48928","G__48929","G__48930","G__48931","G__48932","G__48933","G__48934","p__48935","vec__48936","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","id","G__48939","re-posh.core/subscribe","block","athens.blocks/sort-block","G__48940","G__48941","G__48942","G__48943","G__48944","p__48945","vec__48946","G__48949","cljs.core/reverse","cljs.core/rest","b","res","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","G__48952","G__48953","G__48954","G__48955","re-posh.core/reg-sub","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__47121__auto__","result__47122__auto__","debux.common.util/send-trace!","e","e48956","nodes","G__48958","G__48959","G__48960","G__48961","debux.common.util/spy-last","e48977","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns athens.subs\n  (:require\n    [athens.blocks :as blocks]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :as re-frame]\n    [re-posh.core :as re-posh :refer [subscribe reg-query-sub reg-pull-sub]])) ;; reg-pull-many-sub\n\n;; note: not refering reg-sub because re-posh and re-frame have different reg-subs\n\n;; re-frame subscriptions\n(re-frame/reg-sub\n  :user\n  (fn [db _]\n    (:user db)))\n\n\n(re-frame/reg-sub\n  :app-db\n  (fn [db _]\n    db))\n\n\n(re-frame/reg-sub\n  :errors\n  (fn [db _]\n    (:errors db)))\n\n\n(re-frame/reg-sub\n  :loading\n  (fn [db _]\n    (:loading db)))\n\n\n(re-frame/reg-sub\n  :athena\n  (fn [db _]\n    (:athena db)))\n\n\n(re-frame/reg-sub\n  :merge-prompt\n  (fn [db _]\n    (:merge-prompt db)))\n\n;; datascript queries\n(reg-query-sub\n  :nodes\n  '[:find [?e ...]\n    :where\n    [?e :node/title ?t]])\n\n\n(reg-query-sub\n  :node/refs\n  '[:find ?id\n    :in $ ?regex\n    :where\n    [?e :block/string ?s]\n    [(re-find ?regex ?s)]\n    [?e :block/uid ?id]])\n\n\n(reg-query-sub\n  :page/sidebar\n  '[:find ?order ?title ?bid\n    :where\n    [?e :page/sidebar ?order]\n    [?e :node/title ?title]\n    [?e :block/uid ?bid]])\n\n;; datascript pulls\n(reg-pull-sub\n  :node\n  '[*])\n\n\n(reg-pull-sub\n  :block/uid\n  '[:block/uid])\n\n\n(reg-pull-sub\n  :block/string\n  '[:block/string])\n\n\n(reg-pull-sub\n  :blocks\n  '[:block/string {:block/children ...}])\n\n\n(reg-pull-sub\n  :block/children\n  '[:block/uid :block/string :block/order :block/open :db/id {:block/children ...}])\n\n\n(re-frame/reg-sub\n  :block/children-sorted\n  (fn [[_ id] _]\n    (subscribe [:block/children id]))\n  (fn [block _]\n    (blocks/sort-block block)))\n\n\n(reg-pull-sub\n  :block/_children\n  '[:block/uid :block/string :node/title {:block/_children ...}])\n\n;; layer 3 subscriptions\n\n(re-frame/reg-sub\n  :block/_children2\n  (fn [[_ id] _]\n    (subscribe [:block/_children id]))\n  (fn [block _]\n; find path from nested block to origin node\n    (reverse\n      (rest\n        (loop [b block\n               res []]\n          (if (:node/title b)\n            (conj res b)\n            (recur (first (:block/_children b))\n                   (conj res (dissoc b :block/_children)))))))))\n\n\n(re-posh/reg-sub\n  :pull-nodes\n  :<- [:nodes]\n  (fn-traced [nodes _]\n             {:type :pull-many\n              :pattern '[*]\n              :ids nodes}))\n\n\n(re-frame/reg-sub\n  :favorites\n  :<- [:page/sidebar]\n  (fn-traced [nodes _]\n             (->> nodes\n                  (into [])\n                  (sort-by first))))\n\n;; (rp/reg-sub\n;;  :node/refs2\n;;  (fn [[_ regex]]\n;;    (subscribe [:node/refs regex]))\n;;  (fn [ids _] ; for all refs, find their parents with reverse lookup\n;;    {:type :pull-many\n;;     :pattern '[:node/title :block/uid :block/string {:block/_children ...}]\n;;     :ids (reduce into [] ids)}))\n\n;; (rf/reg-sub\n;;  :node/refs3\n;;  (fn [[_ regex]]\n;;    (subscribe [:node/refs2 regex]))\n;;  (fn [blocks _]\n;;    ;; flatten paths like in :block/_children2 (except keep node/title)\n;;    ;; then normalize refs through group by :node/title\n;;    (->> blocks\n;;         (map (fn [block]\n;;                (reverse\n;;                 (loop [b block\n;;                        res []]\n;;                   (if (:node/title b)\n;;                     (conj res (dissoc b :block/children))\n;;                     (recur (first (:block/_children b))\n;;                            (conj res (dissoc b :block/_children))))))))\n;;         (group-by #(:node/title (first %)))\n;;         (reduce-kv (fn [m k v]\n;;                      (assoc m k (map rest v))) {} ))\n;;    ))\n"]}