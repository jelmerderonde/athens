{"version":3,"sources":["athens/devcards/blocks.cljs"],"mappings":"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","names":["athens.devcards.blocks/datoms","posh.reagent/transact!","athens.db/dsdb","athens.devcards.blocks/block-style","athens.devcards.blocks/block-disclosure-toggle-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.devcards.blocks/block-indicator-style","G__65627","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__65628","garden.selectors/before","G__65629","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.devcards.blocks/drop-area-indicator","athens.devcards.blocks/block-content-style","athens.devcards.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.devcards.blocks/block-component","ident","block","posh.reagent/pull","athens.db/block-pull-pattern","cljs.core/deref","athens.db/sort-block","athens.devcards.blocks/block-el","p__65630","map__65631","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","uid","string","open","order","children","dbid","map__65633","open?","and__4174__auto__","cljs.core/seq","closed?","cljs.core/not","editing-uid","G__65634","re-frame.core/subscribe","tooltip-uid","G__65635","x","y","dragging-uid","closest-uid","closest-kind","G__65636","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","athens.devcards.blocks/dragging-style","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__65638","G__65639","athens.devcards.blocks/toggle","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","athens.router/navigate-uid","komponentit.autosize/textarea","e","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","athens.devcards.blocks/on-key-down","athens.parse-renderer/parse-and-render","iter__4582__auto__","s__65641","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__65643","cljs.core/chunk-buffer","i__65642","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__65640","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","child","id","G__65644","re-frame.core/dispatch","key","shift","val","sel-start","goog.events.KeyCodes/TAB","G__65645","G__65646","goog.events.KeyCodes/ENTER","G__65647","goog.events.KeyCodes/BACKSPACE","G__65648","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :refer [join]]\n    [devcards.core :refer-macros [defcard-rg]]\n    [garden.selectors :as selectors]\n    [komponentit.autosize :as autosize]\n    [posh.reagent :refer [transact! pull]]\n    [re-frame.core  :refer [dispatch subscribe]]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(def datoms\n  [{:db/id          2381\n    :block/uid      \"OaSVyM_nr\"\n    :block/open     true\n    :node/title     \"Athens FAQ\"\n    :block/children [{:db/id          2158\n                      :block/uid      \"BjIm6GeRP\"\n                      :block/string   \"Why open-source?\"\n                      :block/open     true\n                      :block/order    3\n                      :block/children [{:db/id        2163\n                                        :block/uid    \"GNaf3XzpE\"\n                                        :block/string \"The short answer is the security and privacy of your data.\"\n                                        :block/open   true\n                                        :block/order  1}\n                                       {:db/id          2347\n                                        :block/uid      \"jbiKpcmIX\"\n                                        :block/string   \"Firstly, I wouldn't be surprised if Roam was eventually open-sourced.\"\n                                        :block/open     true\n                                        :block/order    0\n                                        :block/children [{:db/id        2176\n                                                          :block/uid    \"gVINXaN8Y\"\n                                                          :block/string \"Suffice it to say that Roam being open-source is undeniably something that the team has already considered. Why is it not open-source already? You'd have to ask the Roam team, but Roam, a business, is not obligated to open-source anything.\"\n                                                          :block/open   true\n                                                          :block/order  2}\n                                                         {:db/id          2346\n                                                          :block/uid      \"ZOxwo0K_7\"\n                                                          :block/string   \"The conclusion of the [[Roam White Paper]] states that Roam's vision is a collective, \\\"open-source\\\" intelligence.\"\n                                                          :block/open     true\n                                                          :block/order    0\n                                                          :block/children [{:db/id        2174\n                                                                            :block/uid    \"WKWPPSYQa\"\n                                                                            :block/string \"((ZOxwo0K_7))\"\n                                                                            :block/open   true\n                                                                            :block/order  0}]}\n                                                         {:db/id        2349\n                                                          :block/uid    \"VQ-ybRmNh\"\n                                                          :block/string \"In the Roam Slack, I recall Conor saying one eventual goal is to work on a protocol that affords interoperability between open source alternatives. I would share the message but can't find it because of Slack's 10k message limit.\"\n                                                          :block/open   true\n                                                          :block/order  1}\n                                                         {:db/id        2351\n                                                          :block/uid    \"PGGS8MFH_\"\n                                                          :block/string \"Ultimately, we don't know when/if Roam will be open-sourced, but it's possible that Athens could accelerate or catalyze this. Regardless, there will always be some who are open-source maximalists and some who want to self-host, because that's probably really the most secure thing you can do (if you know what you're doing).\"\n                                                          :block/open   true\n                                                          :block/order  3}]}]}]}])\n\n\n(transact! db/dsdb datoms)\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"32px\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"})\n\n\n(def block-disclosure-toggle-style\n  {:width \"16px\"\n   :height \"32px\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def block-indicator-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"12px\"\n   :margin-right \"4px\"\n   :transition \"all 0.05s ease\"\n   :height \"32px\"\n   :color (color :panel-color)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"5px\"\n                            :width \"5px\"}]\n                   [:hover {:color (color :link-color)}]]\n                  ;;  [:before {:content \"''\"\n                  ;;            :position \"absolute\"\n                  ;;            :top \"24px\"\n                  ;;            :bottom \"0\"\n                  ;;            :pointer-events \"none\"\n                  ;;            :left \"22px\"\n                  ;;            :width \"1px\"\n                  ;;            :background (color :panel-color)}]\n\n   ::stylefy/manual [[:&.open {}]\n                     [:&.closed {}]\n                     [:&.closed [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                  :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index \"1000\"\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]\n                     [:&.selected {}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :body-text-color)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index \"1000\"\n   :width \"100%\"\n   :animation \"drop-area-appear .5s ease\"\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"0\"\n                                :border-radius \"100px\"\n                                :animation \"drop-area-color-pulse 1s ease infinite alternate\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :word-break \"break-word\"\n   ;;:min-height \"100px\" helpful for development\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :panel-color)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :panel-color))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.isEditing {:outline \"none\"\n                                   :z-index \"10\"\n                                   :display \"block\"\n                                   :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index \"2\"}]]]})\n\n\n(def tooltip-style\n  {:z-index    1\n   :position \"relative\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :display    \"flex\"\n   :flex-direction \"column\"\n   :background-color \"white\"\n   :padding \"5px 10px\"\n   :border-radius \"4px\"\n   :left \"-200px\"\n   :min-width \"150px\"})\n\n\n(def dragging-style)\n  ;;{:background-color \"lightblue\"})\n\n\n\n;;; Components\n\n\n(declare block-component block-el toggle on-key-down)\n\n\n(defn block-component\n  \"This query is long because I'm not sure how to recursively find all child blocks with all attributes\n  '[* {:block/children [*]}] doesn't work\nAlso, why does datascript return a reaction of {:db/id nil} when pulling for [:block/uid uid]?\nno results for q returns nil\nno results for pull eid returns nil\n  \"\n  [ident]\n  (let [block (->> @(pull db/dsdb db/block-pull-pattern ident)\n                   (db/sort-block))]\n    [block-el block]))\n\n\n;; TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [{:block/keys [uid string open order children] dbid :db/id}]\n  (let [open?       (and (seq children) open)\n        closed?     (and (seq children) (not open))\n        editing-uid @(subscribe [:editing-uid])\n        tooltip-uid @(subscribe [:tooltip-uid])\n        {:keys        [x y]\n         dragging-uid :uid\n         closest-uid  :closest/uid\n         closest-kind :closest/kind} @(subscribe [:drag-bullet])]\n\n    [:div (use-style (merge block-style\n                            (when (= dragging-uid uid) dragging-style))\n                     {:class    (join \" \" [\"block-container\" (when (= dragging-uid uid) \"dragging\")])\n                      :data-uid uid})\n     [:div {:style {:display \"flex\"}}\n\n      ;; Toggle\n      (if (seq children)\n        [:button (use-style block-disclosure-toggle-style\n                            {:class (cond open? \"open\" closed? \"closed\")\n                             :on-click #(toggle [:block/uid uid] open)})\n         [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n        [:span (use-style block-disclosure-toggle-style)])\n\n      ;; Bullet\n      (if (= dragging-uid uid)\n        [:span (merge (use-style block-indicator-style\n                                 {:class    (join \" \" [\"bullet\" \"dragging\" (if closed? \"closed\" \"open\")])\n                                  :data-uid uid})\n                      {:style {:transform (str \"translate(\" x \"px, \" y \"px)\")}})]\n\n        [:span (use-style block-indicator-style\n                          {:class    (str \"bullet \" (if closed? \"closed\" \"open\"))\n                           :data-uid uid\n                           :on-click #(navigate-uid uid)})])\n\n      ;; Tooltip\n      (when (and (= tooltip-uid uid)\n                 (not dragging-uid))\n        [:div (use-style tooltip-style {:class \"tooltip\"})\n         [:span [:b \"db/id: \"] dbid]\n         [:span [:b \"uid: \"] uid]\n         [:span [:b \"order: \"] order]])\n\n      ;; Actual Contents\n      [:div (use-style (merge block-content-style {:width       \"100%\"\n                                                   :user-select (when dragging-uid \"none\")})\n                       {:class    \"block-contents\"\n                        :data-uid uid})\n       [autosize/textarea {:value       string\n                           :class       (when (= editing-uid uid) \"isEditing\")\n                           :auto-focus  true\n                           :on-change   (fn [e]\n                                          (prn \"CHANGE\" (.. e -target-value)))\n                           ;;(debounce (.. e -target-value)))\n                           :on-key-down (fn [e] (on-key-down e uid))}]\n       [parse-and-render string]\n\n       ;; Drop Indicator\n       (when (and (= closest-uid uid)\n                  (= closest-kind :child))\n         [:span (use-style drop-area-indicator)])]]\n\n     ;; Children\n     (when open?\n       (for [child children]\n         [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n          [block-el child]]))\n\n     ;; Drop Indicator\n     (when (and (= closest-uid uid) (= closest-kind :sibling))\n       [:span (use-style drop-area-indicator)])]))\n\n;; Helpers\n\n;;(defn on-change\n;;  [v]\n;;  (dispatch [:transact-event [[:db/add [:block/uid \"VQ-ybRmNh\"] :block/string v]]]))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact-event [[:db/add id :block/open (not open)]]]))\n\n\n(defn on-key-down\n  [e uid]\n  (let [key       (.. e -keyCode)\n        shift     (.. e -shiftKey)\n        val       (.. e -target -value)\n        sel-start (.. e -target -selectionStart)]\n    (cond\n      (and (= key KeyCodes.TAB) shift) (dispatch [:unindent uid])\n      (= key KeyCodes.TAB) (dispatch [:indent uid])\n      (= key KeyCodes.ENTER) (dispatch [:enter uid val sel-start])\n      (and (= key KeyCodes.BACKSPACE) (zero? sel-start)) (dispatch [:backspace uid]))))\n\n\n;;; Devcards\n\n\n(defcard-rg Block\n  \"Pull entity 2347, a block within Athens FAQ, and its children. Doesn't pull parents, unlike `block-page`\"\n  [block-component 2347])\n"]}