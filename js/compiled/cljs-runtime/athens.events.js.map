{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__54408__auto__","result__54409__auto__","debux.common.util/send-trace!","e","e54508","_","athens.db/rfdb","db","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not","cljs.core.update.cljs$core$IFn$_invoke$arity$3","e54509","error","cljs.core/assoc-in","e54510","e54511","p__54512","vec__54513","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","e54516","p__54517","vec__54518","uid","p__54521","vec__54522","map","p__54525","vec__54526","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","e54529","athens.db/athens-url","p__54530","vec__54531","json-str","datoms","athens.db/str-to-db-tx","new-db","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","p__54534","map__54535","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","temp__5733__auto__","stored","js/localStorage.getItem","datascript.transit/read-transit-str","p__54537","vec__54538","temp__5735__auto__","prev","cljs.core/deref","p1__54541#","athens.db/find-prev","athens.db/history","athens.db/dsdb","next","p1__54542#","athens.db/find-next","athens.events/get-block","id","G__54543","G__54544","G__54545","posh.reagent/pull","athens.events/get-parent","eid","G__54546","G__54547","datascript.core/entity","cljs.core/first","athens.events/rules","athens.events/gen-block-uid","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/random-uuid","p__54548","vec__54549","_uid","athens.events/split-block","val","sel-start","parent","block","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","new-uid","new-block","reindex","G__54556","G__54557","G__54558","G__54559","G__54560","datascript.core/q","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__54552","vec__54553","order","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.events/bump-up","G__54565","G__54566","G__54567","G__54568","G__54569","p__54561","vec__54562","p__54570","vec__54571","cljs.core/empty?","p__54575","vec__54576","older-sib","p1__54574#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","reindex-blocks","G__54583","G__54584","G__54585","G__54586","G__54587","p__54579","vec__54580","p__54588","vec__54589","grandpa","reindex-grandpa","G__54596","G__54597","G__54598","G__54599","G__54600","p__54592","vec__54593","and__4174__auto__","athens.events/target-child","source","source-parent","target","new-parent-children","G__54605","G__54606","G__54607","G__54608","G__54609","p__54601","vec__54602","new-target-children","G__54614","G__54615","G__54616","G__54617","G__54618","p__54610","vec__54611","athens.events/between","s","t","x","athens.events/target-sibling-same-parent","t-order","s-order","inc-or-dec","cljs.core/inc","cljs.core/dec","G__54623","G__54624","G__54625","G__54626","G__54627","G__54628","G__54629","p__54619","vec__54620","athens.events/target-sibling-diff-parent","target-parent","source-parent-children","G__54634","G__54635","G__54636","G__54637","G__54638","p__54630","vec__54631","target-parent-children","G__54643","G__54644","G__54645","G__54646","G__54647","p__54639","vec__54640","p__54648","vec__54649","e54652","p__54653","vec__54654","source-uid","target-uid","kind","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [posh.reagent :refer [pull #_q #_pull-many]]\n    [re-frame.core :refer [reg-event-db reg-event-fx]]))\n\n\n;;; Events\n\n\n;; app-db events\n\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :toggle-athena\n  (fn [db _]\n    (assoc db :athena (not (:athena db)))))\n\n\n(reg-event-db\n  :toggle-devtool\n  (fn [db _]\n    (update db :devtool not)))\n\n\n(reg-event-db\n  :alert-failure\n  (fn-traced [db error]\n             (assoc-in db [:errors] error)))\n\n\n(reg-event-db\n  :clear-errors\n  (fn-traced [db]\n             (assoc-in db [:errors] {})))\n\n\n(reg-event-db\n  :clear-loading\n  (fn-traced [db]\n             (assoc-in db [:loading] false)))\n\n\n(reg-event-db\n  :editing-uid\n  (fn-traced [db [_ uid]]\n             (assoc db :editing-uid uid)))\n\n\n(reg-event-db\n  :drag-bullet\n  (fn [db [_ map]]\n    (assoc db :drag-bullet map)))\n\n\n(reg-event-db\n  :tooltip-uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip-uid uid)))\n\n\n\n;;; event effects\n\n\n(reg-event-fx\n  :boot\n  (fn-traced [_ _]\n             {:db         db/rfdb\n              :async-flow {:first-dispatch [:get-local-storage-db]\n                           :rules          [{:when :seen? :events :parse-datoms :dispatch [:clear-loading] :halt? true}\n                                            {:when :seen? :events :api-request-error :dispatch [:alert-failure \"Boot Error\"] :halt? true}]}}))\n\n\n(reg-event-fx\n  :get-datoms\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:parse-datoms]\n            :on-failure [:alert-failure]}}))\n\n\n;; FIXME? I reset db/dsdb and store its value in localStorage in the same step. How do we ensure the order of operations is correct?\n(reg-event-fx\n  :parse-datoms\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:reset-conn new-db\n       :set-local-storage-db nil})))\n\n\n(reg-event-fx\n  :get-local-storage-db\n  (fn [{:keys [db]}]\n    (if-let [stored (js/localStorage.getItem \"datascript/DB\")]\n      {:reset-conn (dt/read-transit-str stored)\n       :db         (assoc db :loading false)}\n      {:dispatch [:get-datoms]})))\n\n\n(reg-event-fx\n  :transact-event\n  (fn [_ [_ datoms]]\n    {:transact datoms}))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn next})))\n\n\n;;; dsdb events (transactions)\n\n\n(defn get-block\n  [id]\n  @(pull db/dsdb '[:db/id :block/uid :block/order {:block/children [:block/uid :block/order]}] id))\n\n\n(defn get-parent\n  [id]\n  (let [eid (-> (d/entity @db/dsdb id)\n              :block/_children\n              first\n              :db/id)]\n    (get-block eid)))\n\n\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]])\n\n\n(defn gen-block-uid\n  []\n  (subs (str (random-uuid)) 27))\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ _uid]]))\n\n\n;; TODO but how to set focus... especially async\n(defn split-block\n  [uid val sel-start]\n  (let [parent (get-parent [:block/uid uid])\n        block (get-block [:block/uid uid])\n        head (subs val 0 sel-start)\n        tail (subs val sel-start)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (d/q '[:find ?ch ?new-o\n                            :in $ % ?p ?at\n                            :where (inc-after ?p ?at ?ch ?new-o)]\n                       @db/dsdb rules (:db/id parent) (:block/order block))\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    {:transact [[:db/add (:db/id block) :block/string head]\n                {:db/id (:db/id parent)\n                 :block/children reindex}]\n     :dispatch [:editing-uid new-uid]}))\n\n\n(defn bump-up\n  [uid val sel-start]\n  (let [parent (get-parent [:block/uid uid])\n        block (get-block [:block/uid uid])\n        tail (subs val sel-start)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (d/q '[:find ?ch ?new-o\n                            :in $ % ?p ?at\n                            :where (inc-after ?p ?at ?ch ?new-o)]\n                       @db/dsdb rules (:db/id parent) (inc (:block/order block)))\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    {:transact [[:db/add (:db/id block) :block/string \"\"]\n                {:db/id (:db/id parent) :block/children reindex}]\n     :dispatch [:editing-uid new-uid]}))\n\n\n;; TODO: if enter at end of block, if block open, insert new 0th child. otherwise, add sibling (default behavior right now)\n(reg-event-fx\n  :enter\n  (fn [_ [_ uid val sel-start]]\n    (cond\n      (not (zero? sel-start)) (split-block uid val sel-start)\n      (empty? val) {:dispatch [:unindent uid]}\n      (and (zero? sel-start) val) (bump-up uid val sel-start))))\n\n\n;; TODO: no-op when indenting as the right-most child\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (let [block (get-block [:block/uid uid])\n          parent (get-parent [:block/uid uid])\n          older-sib (->> parent\n                      :block/children\n                      (filter #(= (dec (:block/order block)) (:block/order %)))\n                      first\n                      :db/id\n                      get-block)\n          new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n          reindex-blocks (->> (d/q '[:find ?ch ?new-o\n                                     :in $ % ?p ?at\n                                     :where (dec-after ?p ?at ?ch ?new-o)]\n                                @db/dsdb rules (:db/id parent) (:block/order block))\n                           (map (fn [[id order]] {:db/id id :block/order order})))]\n      {:transact [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                  {:db/id (:db/id older-sib) :block/children [new-block]} ;; becomes child of older sibling block \u2014 same parent but order-1\n                  {:db/id (:db/id parent) :block/children reindex-blocks}]}))) ;; reindex parent\n\n\n;; TODO: no-op when user tries to unindent to a child out of current context\n(reg-event-fx\n  :unindent\n  (fn [_ [_ uid]]\n    (let [parent (get-parent [:block/uid uid])\n          grandpa (get-parent (:db/id parent))\n          new-block {:block/uid uid :block/order (inc (:block/order parent))}\n          reindex-grandpa (->> (d/q '[:find ?ch ?new-order\n                                      :in $ % ?grandpa ?parent-order\n                                      :where (inc-after ?grandpa ?parent-order ?ch ?new-order)]\n                                 @db/dsdb rules (:db/id grandpa) (:block/order parent))\n                            (map (fn [[id order]] {:db/id id :block/order order}))\n                            (concat [new-block]))]\n      (when (and parent grandpa)\n        {:transact [[:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                    {:db/id (:db/id grandpa) :block/children reindex-grandpa}]}))))\n\n\n(defn target-child\n  [source source-parent target]\n  (let [new-block {:block/uid (:block/uid source) :block/order 0}\n        new-parent-children (->> (d/q '[:find ?ch ?new-order\n                                         :in $ % ?parent ?source-order\n                                         :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                    @db/dsdb rules (:db/id source-parent) (:block/order source))\n                              (map (fn [[id order]] {:db/id id :block/order order})))\n        new-target-children (->> (d/q '[:find ?ch ?new-order\n                                        :in $ % ?parent ?at\n                                        :where (inc-after ?parent ?at ?ch ?new-order)]\n                                   @db/dsdb rules (:dbid target) 0)\n                              (map (fn [[id order]] {:db/id id :block/order order}))\n                              (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]] ;; retract source from parent\n     {:db/add (:db/id source-parent) :block/children new-parent-children} ;; reindex parent without source\n     {:db/id (:db/id target) :block/children new-target-children}])) ;; reindex target. include source\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn target-sibling-same-parent\n  [source target parent]\n  (let [t-order (:block/order target)\n        s-order (:block/order source)\n        new-block {:db/id (:db/id source) :block/order (inc t-order)}\n        inc-or-dec (if (> s-order t-order) inc dec)\n        reindex (->> (d/q '[:find ?ch ?new-order\n                            :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                            :where\n                            [?parent :block/children ?ch]\n                            [?ch :block/order ?order]\n                            [(?between ?s-order ?t-order ?order)]\n                            [(?inc-or-dec ?order) ?new-order]]\n                       @db/dsdb (:db/id parent) s-order t-order between inc-or-dec)\n                  (map (fn [[id order]] {:db/id id :block/order order}))\n                  (concat [new-block]))]\n    [{:db/add (:db/id parent) :block/children reindex}]))\n\n\n(defn target-sibling-diff-parent\n  [source target source-parent target-parent]\n  (let [new-block {:db/id (:db/id source) :block/order (inc (:block/order target))}\n        source-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?source-order\n                                           :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                      @db/dsdb rules (:db/id source-parent) (:block/order source))\n                                 (map (fn [[id order]] {:db/id id :block/order order})))\n        target-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?target-order\n                                           :where (inc-after ?parent ?target-order ?ch ?new-order)]\n                                      @db/dsdb rules (:db/id target-parent) (:block/order target))\n                                 (map (fn [[id order]] {:db/id id :block/order order}))\n                                 (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children source-parent-children} ;; reindex source\n     {:db/id (:db/id target-parent) :block/children target-parent-children}])) ;; reindex target\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (let [source        (get-block [:block/uid source-uid])\n                   target        (get-block [:block/uid target-uid])\n                   source-parent (get-parent [:block/uid source-uid])\n                   target-parent (get-parent [:block/uid target-uid])]\n               {:transact\n                (cond\n                  ;; child always has same behavior: move to first child of target\n                  (= kind :child) (target-child source source-parent target)\n                  ;; do nothing if target is directly above source\n                  (and (= source-parent target-parent)\n                    (= 1 (- (:block/order source) (:block/order target)))) nil\n                  ;; re-order blocks between source and target\n                  (= source-parent target-parent) (target-sibling-same-parent source target source-parent)\n                  ;;; when parent is different, re-index both source-parent and target-parent\n                  (not= source-parent target-parent) (target-sibling-diff-parent source target source-parent target-parent))})))\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}