{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__47114__auto__","result__47115__auto__","debux.common.util/send-trace!","e","e51234","_","athens.db/rfdb","G__51248","G__51249","re-frame.core/reg-fx","p__51250","map__51251","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","url","method","opts","on-success","on-failure","c__41735__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__41736__auto__","switch__41712__auto__","state_51323","state_val_51325","inst_51277","inst_51279","inst_51280","cljs.core/not","statearr-51338","statearr-51339","statearr-51342","G__51343","cljs.core/Keyword","statearr-51348","statearr-51349","statearr-51350","statearr-51351","js/Error","statearr-51353","statearr-51354","inst_51292","statearr-51355","statearr-51360","inst_51302","inst_51304","inst_51305","statearr-51361","statearr-51362","statearr-51363","inst_51274","inst_51275","cljs.core.async.impl.ioc-helpers/take!","inst_51310","cljs.core.async.impl.ioc-helpers/return-chan","statearr-51366","statearr-51367","statearr-51369","inst_51297","statearr-51370","inst_51300","inst_51301","statearr-51371","statearr-51372","statearr-51373","inst_51295","statearr-51374","statearr-51375","inst_51307","inst_51308","statearr-51378","inst_51284","inst_51285","inst_51286","inst_51287","inst_51288","statearr-51385","statearr-51386","statearr-51389","state-machine__41713__auto__","ret-value__41714__auto__","result__41715__auto__","cljs.core/keyword-identical?","e51393","js/Object","ex__41716__auto__","statearr-51394","cljs.core.async.impl.ioc-helpers/process-exception","state__41737__auto__","statearr-51398","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/post","cljs-http.client/get","cljs-http.client/put","cljs-http.client/delete","re-frame.core/dispatch","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__51399","G__51400","timers","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","p__51403","map__51404","action","id","event","wait","G__51406","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/setTimeout","js/clearTimeout","cljs.core/deref","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","athens.db/athens-url","G__51415","G__51416","re-posh.core/reg-event-ds","p__51421","vec__51422","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","G__51434","e51429","e51437","p__51441","vec__51442","json-str","datascript.core.reset_conn_BANG_.cljs$core$IFn$_invoke$arity$2","athens.db/dsdb","datascript.core/empty-db","athens.db/schema","athens.db/str-to-db-tx","G__51445","G__51446","p__51447","vec__51448","e51458","p__51466","vec__51467","_event","eid","open-state","athens.events/node-with-title","ds","title","G__51473","G__51474","G__51475","datascript.core/q","athens.events/referencing-blocks","G__51480","G__51481","G__51482","athens.patterns/linked","p__51483","vec__51486","athens.events/rename-refs-tx","old-title","new-title","s","new-s","clojure.string/replace","athens.events/rename-tx","blocks","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__51500","re-posh.core/inject-cofx","p__51507","p__51508","map__51510","vec__51511","e51532","p__51533","p__51534","map__51535","vec__51536","db","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","athens.events/count-children","G__51540","G__51541","G__51542","athens.events/get-children-eids","G__51543","G__51544","G__51545","athens.events/move-blocks-tx","from-title","to-title","block-count","block-eids","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","order","G__51546","G__51547","G__51548","datascript.core/pull","G__51549","p__51550","p__51551","map__51552","vec__51553","e51557","p__51558","p__51559","map__51560","vec__51561","primary-title","secondary-title","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","p__51565","map__51566","e51568","p__51569","map__51570","e51578","error","cljs.core/assoc-in","e51579","e51580","athens.events/boot-flow","e51581"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [athens.patterns :as patterns]\n    [cljs-http.client :as http]\n    [cljs.core.async :refer [go <!]]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :as rf :refer [dispatch reg-fx reg-event-db reg-event-fx]]\n    [re-posh.core :as rp :refer [reg-event-ds]]))\n\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-fx\n  :http\n  (fn [{:keys [url method opts on-success on-failure]}]\n    (go\n      (let [http-fn (case method\n                      :post http/post :get http/get\n                      :put http/put :delete http/delete)\n            res     (<! (http-fn url opts))\n            {:keys [success body] :as all} res]\n        (if success\n          (dispatch (conj on-success body))\n          (dispatch (conj on-failure all)))))))\n\n\n(reg-fx\n  :timeout\n  (let [timers (atom {})]\n    (fn [{:keys [action id event wait]}]\n      (case action\n        :start (swap! timers assoc id (js/setTimeout #(dispatch event) wait))\n        :clear (do (js/clearTimeout (get @timers id))\n                   (swap! timers dissoc id))))))\n\n\n(reg-event-fx\n  :get-datoms\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:parse-datoms]\n            :on-failure [:alert-failure]}}))\n\n\n(reg-event-ds\n  :parse-datoms\n  (fn-traced [_ [_ json-str]]\n             (d/reset-conn! db/dsdb (d/empty-db db/schema)) ;; TODO: refactor to an effect\n             (db/str-to-db-tx json-str)))\n\n\n(reg-event-ds\n  :block/toggle-open\n  (fn-traced [_ [_event eid open-state]]\n             [[:db/add eid :block/open (not open-state)]]))\n\n\n(defn node-with-title\n  [ds title]\n  (d/q '[:find ?e .\n         :in $ ?title\n         :where [?e :node/title ?title]]\n       ds title))\n\n\n(defn referencing-blocks\n  [ds title]\n  (d/q '[:find ?e ?s\n         :in $ ?regex\n         :where\n         [?e :block/string ?s]\n         [(re-find ?regex ?s)]]\n       ds (patterns/linked title)))\n\n\n(defn rename-refs-tx\n  [old-title new-title [eid s]]\n  (let [new-s (str/replace\n                s\n                (patterns/linked old-title)\n                (str \"$1$3$4\" new-title \"$2$5\"))]\n    [:db/add eid :block/string new-s]))\n\n\n(defn rename-tx\n  [ds old-title new-title]\n  (let [eid (node-with-title ds old-title)\n        blocks (referencing-blocks ds old-title)]\n    (->> blocks\n         (map (partial rename-refs-tx old-title new-title))\n         (into [[:db/add eid :node/title new-title]]))))\n\n\n(reg-event-fx\n  :node/renamed\n  [(rp/inject-cofx :ds)]\n  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n             (when (not= old-title new-title)\n               (if (node-with-title ds new-title)\n                 {:db (assoc db :merge-prompt {:active true\n                                               :old-title old-title\n                                               :new-title new-title})\n                  :timeout {:action :start\n                            :id :merge-prompt\n                            :wait 7000\n                            :event [:node/merge-canceled]}}\n                 {:transact (rename-tx ds old-title new-title)}))))\n\n\n(defn count-children\n  [ds title]\n  (d/q '[:find (count ?children) .\n         :in $ ?title\n         :where [?e :node/title ?title]\n         [?e :block/children ?children]]\n       ds title))\n\n\n(defn get-children-eids\n  [ds title]\n  (d/q '[:find [?children ...]\n         :in $ ?title\n         :where [?e :node/title ?title]\n         [?e :block/children ?children]]\n       ds title))\n\n\n(defn move-blocks-tx\n  [ds from-title to-title]\n  (let [block-count (count-children ds to-title)\n        block-eids (get-children-eids ds from-title)]\n    (mapcat (fn [eid]\n              (let [order (:block/order (d/pull ds [:block/order] eid))]\n                [[:db/add [:node/title to-title] :block/children eid]\n                 [:db/add eid :block/order (+ order block-count)]]))\n            block-eids)))\n\n\n(reg-event-fx\n  :node/merged\n  [(rp/inject-cofx :ds)]\n  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n             {:db (dissoc db :merge-prompt)\n              :timeout {:action :clear\n                        :id :merge-prompt}\n              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n                                (move-blocks-tx ds secondary-title primary-title)\n                                (rename-tx ds primary-title secondary-title))}))\n\n\n(reg-event-fx\n  :node/merge-canceled\n  (fn-traced [{:keys [db]} _]\n             {:db (dissoc db :merge-prompt)\n              :timeout {:action :clear\n                        :id :merge-prompt}}))\n\n\n(reg-event-db\n  :alert-failure\n  (fn-traced [db error]\n             (assoc-in db [:errors] error)))\n\n\n(reg-event-db\n  :clear-errors\n  (fn-traced [db]\n             (assoc-in db [:errors] {})))\n\n\n(reg-event-db\n  :clear-loading\n  (fn-traced [db]\n             (assoc-in db [:loading] false)))\n\n\n(defn boot-flow\n  []\n  {:first-dispatch\n   [:get-datoms]\n   :rules [{:when :seen? :events :parse-datoms :dispatch [:clear-loading] :halt? true}\n           {:when :seen? :events :api-request-error :dispatch [:alert-failure \"Boot Error\"] :halt? true}]})\n\n\n(reg-event-fx\n  :boot\n  (fn-traced [_ _]\n             {:async-flow (boot-flow)}))\n"]}