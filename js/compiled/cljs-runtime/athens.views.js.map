{"version":3,"sources":["athens/views.cljs"],"mappings":";;;;;;;;;;;;;;AAmBA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAKL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAML,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAQL;;;AAAA,AAAMC;AAAN,AAGE,AAAMC,AAAO,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAAd,AACE,AAAM,AAAA,AAAAC,AAACC,AAAKJ;AAAZ,AACE,AAACK,AAAS,AAAA,AAAAF,AAAMH;;AAChB,AAAAM,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAFH;;;AAKJ,AAAA,AAAMC,AACHC;AADH,AAEE,AAAMC,AAAG,AAAAC;AACHC,AAAK,AAAA,AAAA,AAAA,AAAIH;AADf,AAEE,AAAA,AAAAI,AAAM,AAAUH;AAAhB,AAAqB,AAAAI,AAAA,AAAA,AAAyB,AAAA,AAAAD;AAAzB,AAAA,AAAAC,AAAAA,AAACP,AAAAA,AAAAA;;;AACtB,AAAaG,AAAGE;;AAMpB,AAAA,AAAMG;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA;;AAMA,AAAA,AAAMC;AAAN,AAEE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMkC,AAAKP;AAAL,AAAQ,AAACD,AAAQC;AANnD,AAOIQ,AAAMC;;;AAGZ,AAAA,AAAMC;AAAN,AAEE,AAAMC,AAAc,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnB,AAAAA,AAAAA;;AACfoB,AAAc,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAKiB;AADzB,AAAAjB,AAEMoB,AAAe,AAAAC,AAAMN;AAANO,AAAA,AAAA;AAAAC,AAAA,AAAA,AAA+BJ;AAA/B,AAAA,AAAAE,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;AAFtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIG,AAAA,AAAA,AAAI,AAAA,AAAaJ,AACdK,AAAoB,AAAA,AAAQL,AAC5BM,AAAqB,AAAA,AAAQN;;AAGrC,AAAA,AAAMO,AACHC;AADH,AAAA,AAAA,AAAA,AAEQ,AAACC,AAAUnC,AACf,AAAAoC,AAAMF;AAANE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACSlB;;;AADT;AAESC;;;AAFT;AAGQG;;;;AACNH;;;;;AAGN,AAAA,AAAMmB;AAAN,AAEE,AAAMf,AAAc,AAAAgB,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAClC,AAAAA,AAAAA;;AACfmC,AAAQ,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACpC,AAAAA,AAAAA;;AADf,AAEE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEIH,AACAwC,AACAC,AACD,AAAA,AAAArC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKkC,AACFI,AACK,AAACT,AAAUpC,AACf8C,AAAaxB,AACR,AAACc,AAAUlC,AACfgC,AAAY,AAAA,AAAA,AAAA,AAAA,AAAA3B,AAAKiB","names":["athens.views/app-wrapper-style","athens.views/match-panel-style","athens.views/main-content-style","athens.views/alert","errors","G__68215","re-frame.core/subscribe","cljs.core/deref","cljs.core/seq","js/alert","G__68216","re-frame.core/dispatch","athens.views/file-cb","e","fr","js/FileReader","file","p1__68217#","G__68218","athens.views/about-panel","athens.views/pages-panel","athens.devcards.all-pages/table","athens.db/dsdb","athens.views/page-panel","current-route","G__68219","uid","node-or-block","G__68220","G__68221","G__68222","posh.reagent/pull","athens.devcards.node-page/node-page-component","athens.devcards.block-page/block-page-component","athens.views/match-panel","name","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","G__68223","cljs.core/Keyword","athens.views/main-panel","G__68224","loading","G__68225","athens.devcards.athena/athena-component","athens.devcards.devtool/devtool-component","athens.devcards.spinner/initial-spinner-component","athens.devcards.left-sidebar/left-sidebar"],"sourcesContent":["(ns athens.views\n  (:require\n    [athens.db :as db]\n    [athens.devcards.all-pages :refer [table]]\n    [athens.devcards.athena :refer [athena-component]]\n    [athens.devcards.block-page :refer [block-page-component]]\n    [athens.devcards.devtool :refer [devtool-component]]\n    [athens.devcards.left-sidebar :refer [left-sidebar]]\n    [athens.devcards.node-page :refer [node-page-component]]\n    [athens.devcards.spinner :refer [initial-spinner-component]]\n    [athens.subs]\n    [posh.reagent :refer [pull]]\n    [re-frame.core :refer [subscribe dispatch]]\n    [stylefy.core :refer [use-style]]))\n\n\n;;; Styles\n\n\n(def app-wrapper-style\n  {:display \"flex\"\n   :height \"100vh\"})\n\n\n(def match-panel-style\n  {:margin \"5rem auto\"\n   :min-width \"500px\"\n   :max-width \"900px\"})\n\n\n(def main-content-style\n  {:flex \"1 1 100%\"\n   :overflow-y \"auto\"})\n\n\n;;; Components\n\n\n(defn alert\n  \"When `:errors` subscription is updated, global alert will be called with its contents and then cleared.\"\n  []\n  (let [errors (subscribe [:errors])]\n    (when (seq @errors)\n      (js/alert (str @errors))\n      (dispatch [:clear-errors]))))\n\n\n(defn file-cb\n  [e]\n  (let [fr (js/FileReader.)\n        file (.. e -target -files (item 0))]\n    (set! (.-onload fr) #(dispatch [:parse-datoms (.. % -target -result)]))\n    (.readAsText fr file)))\n\n\n;; Panels\n\n\n(defn about-panel\n  []\n  [:div\n   [:h1 \"About Panel\"]])\n\n\n(defn pages-panel\n  []\n  (fn []\n    [:div\n     [:p\n      \"Upload your DB \" [:a {:href \"\"} \"(tutorial)\"]]\n     [:input.input-file {:type      \"file\"\n                         :name      \"file-input\"\n                         :on-change (fn [e] (file-cb e))}]\n     [table db/dsdb]]))\n\n\n(defn page-panel\n  []\n  (let [current-route (subscribe [:current-route])\n        uid           (-> @current-route :path-params :id)\n        node-or-block @(pull db/dsdb '[*] [:block/uid uid])]\n    [:div {:style {:margin-left \"40px\" :margin-right \"40px\"}}\n     (if (:node/title node-or-block)\n       [node-page-component (:db/id node-or-block)]\n       [block-page-component (:db/id node-or-block)])]))\n\n\n(defn match-panel\n  [name]\n  [:div (use-style match-panel-style)\n   [(case name\n      :about about-panel\n      :pages pages-panel\n      :page page-panel\n      pages-panel)]])\n\n\n(defn main-panel\n  []\n  (let [current-route (subscribe [:current-route])\n        loading (subscribe [:loading])]\n    (fn []\n      [:<>\n       [alert]\n       [athena-component]\n       [devtool-component]\n       (if @loading\n         [initial-spinner-component]\n         [:div (use-style app-wrapper-style)\n          [left-sidebar db/dsdb]\n          [:div (use-style main-content-style)\n           [match-panel (-> @current-route :data :name)]]])])))\n"]}