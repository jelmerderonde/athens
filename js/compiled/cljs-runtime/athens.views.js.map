{"version":3,"sources":["athens/views.cljs"],"mappings":";;;;;;;;;;;AAaA,AAAA,AAAMA;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA;;AAMA,AAAA,AAAMC,AACHC;AADH,AAEE,AAAMC,AAAG,AAAAC;AACHC,AAAK,AAAA,AAAA,AAAA,AAAIH;AADf,AAEE,AAAA,AAAAI,AAAM,AAAUH;AAAhB,AAAqB,AAAAI,AAAA,AAAA,AAAyB,AAAA,AAAAD;AAAzB,AAAA,AAAAC,AAAAA,AAACC,AAAAA,AAAAA;;;AACtB,AAAaL,AAAGE;;AAGpB,AAAA,AAAMI;AAAN,AAEE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMkC,AAAKP;AAAL,AAAQ,AAACD,AAAQC;AANnD,AAOIQ,AAAMC;;;AAGZ;;;AAAA,AAAMC;AAAN,AAGE,AAAMC,AAAO,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAAd,AACE,AAAM,AAAA,AAAAC,AAACC,AAAKJ;AAAZ,AACE,AAACK,AAAS,AAAA,AAAAF,AAAMH;;AAChB,AAAAM,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACX,AAAAA,AAAAA;;AAFH;;;AAKJ,AAAA,AAAMY,AACHC;AADH,AAAA,AAAA,AAAA,AAEQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACL,AAAAC,AAAMF;AAANE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACSvB;;;AADT;AAESS;;;AAFT;AAGQgB;;;;AACNhB;;;;;AAGN,AAAA,AAAMiB;AAAN,AAEE,AAAMC,AAAc,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACb,AAAAA,AAAAA;;AACfc,AAAQ,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACf,AAAAA,AAAAA;;AADf,AAEE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEIgB,AACAnB,AACAoB,AAAOrB,AACR,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKa,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACP,AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACAS,AACAE,AAAatB,AAEb,AAAA,AAAA,AAAA,AAAA,AAAA,AAACW,AACAF,AAAY,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAKW","names":["athens.views/about-panel","athens.views/file-cb","e","fr","js/FileReader","file","p1__55890#","G__55891","re-frame.core/dispatch","athens.views/pages-panel","athens.devcards.all-pages/table","athens.db/dsdb","athens.views/alert","errors","G__55892","re-frame.core/subscribe","cljs.core/deref","cljs.core/seq","js/alert","G__55893","athens.views/match-panel","name","athens.lib.dom.attributes.with_styles.cljs$core$IFn$_invoke$arity$1","G__55894","cljs.core/Keyword","athens.page/main","athens.views/main-panel","current-route","G__55895","loading","G__55896","athens.style/base-styles","athens.devcards.athena/athena","athens.devcards.left-sidebar/left-sidebar"],"sourcesContent":["(ns athens.views\n  (:require\n    [athens.db :as db]\n    [athens.devcards.all-pages :refer [table]]\n    [athens.devcards.athena :refer [athena]]\n    [athens.devcards.left-sidebar :refer [left-sidebar]]\n    [athens.lib.dom.attributes :refer [with-styles]]\n    [athens.page :as page]\n    [athens.style :as style]\n    [athens.subs]\n    [re-frame.core :as rf :refer [subscribe dispatch]]))\n\n\n(defn about-panel\n  []\n  [:div\n   [:h1 \"About Panel\"]])\n\n\n(defn file-cb\n  [e]\n  (let [fr (js/FileReader.)\n        file (.. e -target -files (item 0))]\n    (set! (.-onload fr) #(dispatch [:parse-datoms (.. % -target -result)]))\n    (.readAsText fr file)))\n\n\n(defn pages-panel\n  []\n  (fn []\n    [:div\n     [:p\n      \"Upload your DB \" [:a {:href \"\"} \"(tutorial)\"]]\n     [:input.input-file {:type      \"file\"\n                         :name      \"file-input\"\n                         :on-change (fn [e] (file-cb e))}]\n     [table db/dsdb]]))\n\n\n(defn alert\n  \"When `:errors` subscription is updated, global alert will be called with its contents and then cleared.\"\n  []\n  (let [errors (subscribe [:errors])]\n    (when (seq @errors)\n      (js/alert (str @errors))\n      (dispatch [:clear-errors]))))\n\n\n(defn match-panel\n  [name]\n  [:div (with-styles {:margin \"5rem auto\" :min-width \"500px\" :max-width \"900px\"})\n   [(case name\n      :about about-panel\n      :pages pages-panel\n      :page page/main\n      pages-panel)]])\n\n\n(defn main-panel\n  []\n  (let [current-route (subscribe [:current-route])\n        loading (subscribe [:loading])]\n    (fn []\n      [:<>\n       [style/base-styles]\n       [alert]\n       [athena db/dsdb]\n       (if @loading\n         [:h1 (with-styles {:margin-top \"50vh\" :text-align \"center\" :opacity \"0.9\"}) \"Loading Athens \ud83d\ude08\"]\n         [:div\n          (with-styles {:display \"flex\" :height \"100vh\"})\n          [style/base-styles]\n          [left-sidebar db/dsdb]\n          [:div\n           (with-styles {:flex \"1 1 100%\" :overflow-y \"auto\"})\n           [match-panel (-> @current-route :data :name)]]])])))\n"]}