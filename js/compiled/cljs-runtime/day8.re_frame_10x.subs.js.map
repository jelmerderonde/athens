{"version":3,"sources":["day8/re_frame_10x/subs.cljs"],"mappings":"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","names":["G__33305","G__33306","day8.re-frame-10x.inlined-deps.re-frame.v0v11v0.re-frame.core/reg-sub","db","_","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__33307","G__33308","G__33309","G__33310","settings","G__33311","G__33312","G__33313","G__33314","p__33315","vec__33316","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","panel-width%","n","G__33319","Math/ceil","G__33320","G__33321","G__33322","G__33323","G__33324","G__33325","G__33326","G__33327","p__33328","vec__33329","width","G__33332","G__33333","G__33334","G__33335","G__33336","G__33337","G__33338","G__33339","G__33340","G__33341","G__33342","G__33343","G__33344","G__33345","G__33346","G__33347","G__33348","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","G__33349","G__33350","G__33351","G__33352","G__33353","G__33354","G__33355","G__33356","G__33357","G__33358","G__33359","G__33360","G__33361","G__33362","G__33363","G__33364","G__33365","G__33366","G__33367","G__33368","G__33369","G__33370","trace","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__33371","G__33372","G__33373","G__33374","G__33376","G__33377","G__33378","G__33379","app-db-settings","p1__33375#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/val","cljs.core/key","G__33380","G__33381","G__33382","G__33383","G__33384","G__33385","G__33386","G__33387","G__33388","G__33389","G__33390","G__33391","p__33392","vec__33393","expansions","path","cljs.core/contains?","G__33396","G__33397","G__33398","G__33399","root","G__33400","G__33401","G__33402","G__33403","G__33404","G__33405","G__33406","G__33407","G__33408","G__33409","G__33410","G__33411","G__33412","G__33413","traces","G__33414","G__33415","G__33416","G__33417","cljs.core/count","G__33418","G__33419","G__33420","G__33421","G__33422","G__33423","G__33424","G__33425","p__33426","vec__33427","beginning","ending","cljs.core.into.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.utils.utils/id-between-xf","p__33430","vec__33431","day8.re-frame-10x.subs/filter-ignored-views","filtered-views","munged-ns","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/munge","cljs.core/set","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.metamorphic/render?","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2","G__33434","G__33435","G__33436","G__33437","G__33438","G__33439","G__33440","G__33441","G__33442","G__33443","G__33444","G__33445","G__33446","G__33447","G__33448","G__33449","trace-root","G__33450","G__33451","G__33452","G__33453","G__33454","G__33455","G__33456","G__33457","snapshot","G__33458","G__33459","G__33460","G__33461","G__33462","G__33463","epochs","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.metamorphic/matched-event","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","cljs.core/first","cljs.core/>","G__33464","G__33465","G__33466","G__33467","G__33468","G__33469","p__33470","vec__33471","match-ids","current-id","match","cljs.core/last","G__33474","G__33475","G__33476","G__33477","match-state","G__33478","G__33479","G__33480","G__33481","G__33482","G__33483","G__33484","G__33485","G__33486","G__33487","G__33488","G__33489","G__33490","G__33491","G__33492","G__33493","G__33494","G__33495","G__33496","G__33497","G__33498","G__33499","G__33500","G__33501","G__33502","G__33503","G__33504","G__33505","G__33506","G__33507","G__33508","G__33509","G__33510","G__33511","G__33512","G__33513","G__33514","G__33515","p__33516","vec__33517","current","ids","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__33520","G__33521","G__33522","G__33523","G__33524","G__33525","p__33526","vec__33527","day8.re-frame-10x.utils.utils/last-in-vec","G__33530","G__33531","G__33532","G__33533","start-of-epoch","end-of-epoch","day8.re-frame-10x.metamorphic/elapsed-time","G__33535","G__33536","G__33537","G__33538","p1__33534#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.metamorphic/request-animation-frame?","day8.re-frame-10x.metamorphic/request-animation-frame-end?","G__33539","G__33540","G__33541","G__33542","frame-traces","var_args","G__33547","day8.re-frame-10x.subs/+nil","args-arr__4810__auto__","len__4789__auto__","i__4790__auto__","argseq__4811__auto__","cljs.core/IndexedSeq","seq33544","G__33545","cljs.core/next","G__33546","self__4776__auto__","x","y","more","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/+","G__33550","G__33551","G__33552","G__33553","G__33554","G__33555","p__33560","p__33561","vec__33562","vec__33565","af-start-end","epoch-traces","frame-number","vec__33568","frame-pairs","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","start","end","af-traces","day8.re-frame-10x.metamorphic/id-between-xf","total-time","subs-time","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.metamorphic/subscription?","cljs.core.map.cljs$core$IFn$_invoke$arity$1","render-time","G__33571","G__33572","G__33573","G__33574","map__33575","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","G__33578","G__33579","G__33580","G__33581","start-of-render","G__33582","G__33583","G__33584","G__33585","cljs.core/empty?","G__33586","G__33587","G__33592","G__33593","G__33594","G__33595","G__33600","G__33601","G__33602","G__33603","epoch","G__33608","G__33609","G__33610","G__33611","G__33612","G__33613","G__33614","G__33615","day8.re-frame-10x.subs/string!","cljs.spec.alpha/and-spec-impl","p1__33616#","cljs.core/string?","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__33617","cljs.core/coll?","cljs.core/pos-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__33618","cljs.core/map?","G__33624","day8.re-frame-10x.subs/sub-type-value","sub-type","G__33625","cljs.core/Keyword","day8.re-frame-10x.subs/accumulate-sub-value","order","exp","total","temp__5733__auto__","js/Math.pow","cljs.core/rest","day8.re-frame-10x.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame-10x.subs/sub-sort-val","order-x","order-y","cljs.core/compare","day8.re-frame-10x.subs/sub-op-type->type","t","G__33630","p__33635","p__33636","vec__33637","vec__33640","day8.re-frame-10x.subs/prepare-pod-info","sub-info","sub-state","subscription","remove-fn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","me","cljs.core/constantly","subx","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","state","sub","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","or__4185__auto__","G__33645","G__33646","G__33647","G__33648","G__33651","G__33652","G__33653","G__33654","G__33655","G__33656","G__33657","G__33658","G__33659","G__33660","G__33661","G__33662","G__33663","G__33664","G__33665","G__33666","G__33667","G__33668","G__33669","G__33670","G__33672","G__33673","G__33674","G__33675","G__33676","G__33677","G__33678","G__33679","G__33680","G__33681","p__33682","vec__33683","all-subs","ignore-unchanged-l2?","filter-str","pins","compare-fn","s1","s2","p1","cljs.core/boolean","p2","G__33686","cljs.core.sort.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.metamorphic/unchanged-l2-subscription?","cljs.core/not-empty","p__33687","map__33688","id","clojure.string/includes?","G__33690","G__33691","G__33692","G__33693","subs","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/frequencies","G__33694","G__33695","G__33696","G__33697","counts","cljs.core.get.cljs$core$IFn$_invoke$arity$3","G__33698","G__33699","G__33700","G__33701","G__33702","G__33703","G__33704","G__33705","G__33711","G__33712","G__33713","G__33714","G__33715","G__33716","G__33717","G__33718","G__33719","G__33720","G__33721","G__33722","G__33723","G__33724","G__33725","G__33726","G__33727","G__33728","G__33729","G__33730","G__33731","G__33732","G__33733","G__33734","G__33735","G__33736","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","i","temp__5739__auto__","code","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","G__33741","G__33742","G__33743","G__33744","G__33745","G__33746","G__33747","G__33748","form","zprint.core/zprint-str","G__33749","G__33750","G__33751","G__33752","G__33753","G__33754","G__33755","G__33756","G__33757","G__33758","G__33759","G__33760","G__33761","G__33762","G__33763","G__33764","day8.re-frame-10x.subs/canvas","js/document.createElement","G__33765","G__33766","context","G__33769","G__33770","G__33771","G__33772","G__33773","G__33774","p__33775","vec__33776","window-width","char-width","G__33779","G__33781","G__33782","G__33783","G__33784","G__33785","G__33786","component","G__33787","G__33788","G__33789","G__33790","G__33791","G__33792","errors","G__33793","G__33794"],"sourcesContent":["(ns day8.re-frame-10x.subs\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v0v11v0.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [day8.re-frame-10x.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]\n            [zprint.core :as zp]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/panel-width%-rounded\n  :<- [:settings/panel-width%]\n  ;; Rounds panel width to nearest n%\n  (fn [panel-width% [_ n]]\n    ;; https://stackoverflow.com/a/19621472\n    (/ (* (Math/ceil (/ (* panel-width% 100)\n                        n))\n          n)\n       100.0)))\n\n(rf/reg-sub\n  :settings/window-width\n  ;; Prefer window-width-rounded if you don't need the exact number of pixels.\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :window-width)))\n\n(rf/reg-sub\n  :settings/window-width-rounded\n  :<- [:settings/window-width]\n  ;; Window width, rounded up to the nearest n pixels.\n  ;; Useful when you want to respond to window size changes\n  ;; but not too many of them.\n  (fn [width [_ n]]\n    (* (Math/ceil (/ width n))\n       n)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n(rf/reg-sub\n  :settings/app-db-follows-events?\n  :<- [:settings/root]\n  (fn [settings]\n    (:app-db-follows-events? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/all-events-by-id\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (->> (map (juxt key (comp :event :tags metam/matched-event :match-info val))\n              (:matches-by-id epochs))\n         (sort-by first >))))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/current-match]\n  (fn [epochs _]\n    (:id (first epochs))))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  :<- [:traces/current-event-traces]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/intra-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/intra-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n\n(rf/reg-sub\n  :subs/filter-str\n  :<- [:subs/root]\n  (fn [root _]\n    (:filter-str root)))\n\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  :<- [:subs/filter-str]\n  :<- [:subs/sub-pins]\n  (fn [[all-subs ignore-unchanged-l2? filter-str pins]]\n    (let [compare-fn (fn [s1 s2]\n                       (let [p1 (boolean (get-in pins [(:id s1) :pin?]))\n                             p2 (boolean (get-in pins [(:id s2) :pin?]))]\n                         (if (= p1 p2)\n                           (compare (:path s1) (:path s2))\n                           p1)))]\n      (cond->> (sort compare-fn all-subs)\n               ignore-unchanged-l2? (remove metam/unchanged-l2-subscription?)\n               (not-empty filter-str) (filter (fn [{:keys [path id]}]\n                                                (or (str/includes? path filter-str)\n                                                    (get-in pins [id :pin?]))))))))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n\n(rf/reg-sub\n  :subs/sub-pins\n  :<- [:subs/root]\n  (fn [subs _]\n    (:pinned subs)))\n\n;;\n\n(rf/reg-sub\n  :code/root\n  (fn [db _]\n    (:code db)))\n\n(rf/reg-sub\n  :code/current-code\n  :<- [:traces/current-event-traces]\n  (fn [traces _]\n    (keep-indexed (fn [i trace]\n                    (when-some [code (get-in trace [:tags :code])]\n                      {:id       i\n                       :trace-id (:id trace)\n                       :title    (pr-str (:op-type trace))\n                       :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n                       :form     (get-in trace [:tags :form])}))\n                  traces)))\n\n(rf/reg-sub\n  :code/current-form\n  :<- [:code/current-code]\n  (fn [code _]\n    (:form (first code))))\n\n(rf/reg-sub\n  :code/current-zprint-form\n  :<- [:code/current-form]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n  :code/code-open?\n  :<- [:code/root]\n  (fn [code _]\n    (:code-open? code)))\n\n(rf/reg-sub\n  :code/highlighted-form\n  :<- [:code/root]\n  (fn [code _]\n    (:highlighted-form code)))\n\n(rf/reg-sub\n  :code/show-all-code?\n  :<- [:code/root]\n  (fn [code _]\n    (:show-all-code? code)))\n\n(rf/reg-sub\n  :code/repl-msg-state\n  :<- [:code/root]\n  (fn [code _]\n    (:repl-msg-state code)))\n\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n  :code/single-character-width\n  (fn [_ _]\n    (let [context (.getContext canvas \"2d\")]\n      (set! (.-font context) \"monospace 1em\")\n      (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n  :code/max-column-width\n  :<- [:settings/window-width-rounded 100]\n  :<- [:code/single-character-width]\n  ;; It seems like it would be possible to do something smarter responding to panel sizing,\n  ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n  (fn [[window-width char-width] _]\n    (Math/ceil (/ window-width\n                  char-width))))\n\n;;\n\n(rf/reg-sub\n  :component/root\n  (fn [db _]\n    (:component db)))\n\n(rf/reg-sub\n  :component/direction\n  :<- [:component/root]\n  (fn [component _]\n    (:direction component)))\n\n;;\n\n(rf/reg-sub\n  :errors/root\n  (fn [db _]\n    (:errors db)))\n\n(rf/reg-sub\n  :errors/popup-failed?\n  :<- [:errors/root]\n  (fn [errors _]\n    (:popup-failed? errors)))\n\n;;\n\n(rf/reg-sub\n  :history/showing-history?\n  (fn [db _]\n    (get-in db [:history :showing-history?])))\n"]}