{"version":3,"sources":["athens/parse_renderer.cljs"],"mappings":";;;;;;AAQA,AAAA,AAKA;;;AAAA,AAAMA,AAEHC;AAFH,AAGE,AAAAC,AAAA,AAAA,AACc;AAAOG;AAAP,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAgCD;;;AAD5BA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AADrB,AAGc,AAAKE;AAAL,AACE,AAAMC,AAAG,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAoCF;AAApC,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGe,AAAA,AAAA,AAAA,AAACC,AAAqB,AAAA,AAAA,AAAAC,AAAaJ,AACYD;AAR9E,AAUc,AAAKC;AAAL,AACE,AAAMK,AAAO,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAsCN;AAAtC,AAAA,AAAAM,AAAAA,AAACJ,AAAAA,AAAAA;;AAAd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGc,AAAA,AAAA,AAAA,AAACC,AAAqBH,AAAM,AAAAO,AAAkB,AAAA,AAAA,AAAAH,AAAgBC;AAAlC,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;AAd3D,AAec,AAAKC;AAAL,AACE,AAAMT,AAAG,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAoCD;AAApC,AAAA,AAAAC,AAAAA,AAACR,AAAAA,AAAAA;;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGc,AAAA,AAAA,AAAA,AAACC,AAAqB,AAAA,AAAA,AAAAC,AAAaJ,AAC9C,AAAA,AAASS;AApB5B,AAqBc,AAAAE,AAAgBO;AAAhB,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEaA,AACVC;AAxBjB,AAyBc,AAAKA;AAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAC2BA;;AA1BzCvB,AA2BEF;AA3BF,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AA8BH;;;AAAA,AAAMY,AAEHH;AAFH,AAGE,AAAMc,AAAO,AAACC,AAAoBf;AAAlC,AACE,AAAI,AAACgB,AAAeF;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW,AAACG,AAAO,AAACC,AAAkBJ,AAEnCd;;AAJH,AAAA,AAMG,AAACmB,AAAI,AAAChC,AAAU2B","names":["athens.parse-renderer/transform","tree","G__54664","G__54665","instaparse.core/transform","contents","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","title","id","G__54666","re-frame.core/subscribe","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","string","G__54667","G__54668","athens.parse-renderer/parse-and-render","tag-name","G__54669","p__54670","map__54671","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","url","text","result","athens.parser/parse-to-ast","instaparse.core/failure?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","instaparse.core/get-failure","cljs.core/vec"],"sourcesContent":["(ns athens.parse-renderer\n  (:require\n    [athens.parser :as parser]\n    [instaparse.core :as insta]\n    [re-frame.core :refer [subscribe]]\n    [reitit.frontend.easy :as rfee]))\n\n\n(declare parse-and-render)\n\n\n;; Instaparse transforming docs: https://github.com/Engelberg/instaparse#transforming-the-tree\n\n(defn transform\n  \"Transforms Instaparse output to Hiccup.\"\n  [tree]\n  (insta/transform\n    {:block     (fn [& contents]\n                  (concat [:span {:class \"block\"}] contents))\n     :page-link (fn [title]\n                  (let [id (subscribe [:block/uid [:node/title title]])]\n                    [:span {:class \"page-link\"}\n                     [:span {:style {:color \"gray\"}} \"[[\"]\n                     [:a {:href  (rfee/href :page {:id (:block/uid @id)})\n                          :style {:text-decoration \"none\" :color \"dodgerblue\"}} title]\n                     [:span {:style {:color \"gray\"}} \"]]\"]]))\n     :block-ref (fn [id]\n                  (let [string (subscribe [:block/string [:block/uid id]])]\n                    [:span {:class \"block-ref\"\n                            :style {:font-size \"0.9em\" :border-bottom \"1px solid gray\"}}\n                     [:a {:href (rfee/href :page {:id id})} (parse-and-render (:block/string @string))]]))\n     :hashtag   (fn [tag-name]\n                  (let [id (subscribe [:block/uid [:node/title tag-name]])]\n                    [:a {:class \"hashtag\"\n                         :style {:color \"gray\" :text-decoration \"none\" :font-weight \"bold\"}\n                         :href  (rfee/href :page {:id (:block/uid @id)})}\n                     (str \"#\" tag-name)]))\n     :url-link  (fn [{url :url} text]\n                  [:a {:class \"url-link\"\n                       :href url}\n                   text])\n     :bold      (fn [text]\n                  [:strong {:class \"bold\"} text])}\n    tree))\n\n\n(defn parse-and-render\n  \"Converts a string of block syntax to Hiccup, with fallback formatting if it can\u2019t be parsed.\"\n  [string]\n  (let [result (parser/parse-to-ast string)]\n    (if (insta/failure? result)\n      [:span\n       {:title (pr-str (insta/get-failure result))\n        :style {:color \"red\"}}\n       string]\n      [:span\n       (vec (transform result))])))\n"]}